var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AppGateway.html",[0,0.271,1,2.344]],["body/classes/AppGateway.html",[0,0.337,1,3.705,2,2.921,3,0.231,4,0.198,5,0.165,6,3.666,7,1.822,8,5.108,9,0.301,10,1.822,11,4.069,12,0.792,13,5.372,14,1.571,15,0.807,16,5.473,17,2.666,18,0.024,19,5.108,20,4.314,21,0.625,22,1.625,23,0.575,24,3.666,25,4.651,26,3.666,27,3.239,28,3.239,29,2.921,30,3.666,31,3.666,32,0.231,33,2.921,34,4.314,35,4.314,36,3.666,37,2.921,38,4.314,39,4.314,40,4.314,41,2.921,42,4.314,43,4.314,44,4.314,45,4.314,46,4.314,47,4.314,48,2.921,49,4.314,50,0.014,51,0.018,52,0.014]],["title/modules/AppModule.html",[53,1.226,54,2.344]],["body/modules/AppModule.html",[0,0.291,1,3.365,3,0.2,4,0.171,5,0.143,7,1.239,12,0.539,15,0.5,18,0.024,21,0.539,22,1.402,23,0.644,32,0.2,50,0.012,51,0.016,52,0.012,53,1.981,54,4.672,55,2.436,56,1.961,57,2.3,58,2.3,59,1.961,60,2.828,61,2.117,62,3.163,63,3.163,64,3.958,65,3.958,66,3.374,67,3.643,68,3.072,69,2.117,70,2.3,71,3.722,72,3.365,73,2.52,74,3.365,75,4.044,76,3.722,77,0.539,78,0.5,79,0.291,80,0.539,81,3.365,82,3.163,83,3.365,84,2.52,85,0.579,86,3.722,87,3.722,88,3.722,89,3.365,90,3.722,91,3.722,92,3.722,93,2.52,94,3.722,95,3.365,96,3.722,97,1.824,98,3.722,99,3.722,100,2.795]],["title/injectables/ArticleIdMiddleware.html",[101,0.271,102,2.344]],["body/injectables/ArticleIdMiddleware.html",[0,0.302,3,0.207,4,0.178,5,0.148,7,1.289,9,0.27,12,0.739,14,1.011,15,0.685,18,0.024,21,0.56,23,0.603,32,0.207,50,0.013,51,0.017,52,0.013,77,0.739,78,0.685,79,0.399,80,0.739,85,0.602,101,0.399,102,3.454,103,1.075,104,3.289,105,1.403,106,2.046,107,3.289,108,1.901,109,3.87,110,4.335,111,2.687,112,2.796,113,3.196,114,1.683,115,3.87,116,1.552,117,2.392,118,2.687,119,1.213,120,1.896,121,2.039,122,1.77,123,2.62,124,1.011,125,2.039,126,2.906,127,1.896,128,2.202,129,1.213,130,3.173,131,2.046,132,2.039,133,2.906,134,2.039,135,2.62,136,2.906,137,3.454,138,2.039,139,3.454,140,3.289,141,1.289,142,0.789,143,3.87,144,1.108,145,3.153,146,3.87,147,3.831,148,0.951,149,1.142,150,3.87,151,3.289]],["title/controllers/ArticlesController.html",[152,1.697,153,2.344]],["body/controllers/ArticlesController.html",[0,0.197,3,0.135,4,0.116,5,0.097,9,0.176,12,0.546,15,0.757,17,3.481,18,0.024,21,0.816,23,0.514,32,0.135,50,0.008,51,0.012,52,0.008,53,0.892,77,0.816,78,0.757,80,0.816,85,0.392,97,1.235,105,1.658,116,2.607,130,3.214,131,2.011,132,1.327,134,1.986,139,3.634,141,0.839,142,0.768,144,1.223,148,1.233,149,1.583,152,2.213,153,2.552,154,2.141,155,1.892,156,4.031,157,3.392,158,3.77,159,3.77,160,3.838,161,3.77,162,3.77,163,2.52,164,2.52,165,5.003,166,2.52,167,2.52,168,2.52,169,2.52,170,2.52,171,2.52,172,2.52,173,2.52,174,2.52,175,2.52,176,2.52,177,2.52,178,2.52,179,2.52,180,2.52,181,2.52,182,3.058,183,3.204,184,2.141,185,4.031,186,2.141,187,1.892,188,2.57,189,2.141,190,3.392,191,1.433,192,1.892,193,2.67,194,1.892,195,2.33,196,2.52,197,2.52,198,2.141,199,1.557,200,2.52,201,3.416,202,2.141,203,2.141,204,1.892,205,2.141,206,2.141,207,2.141,208,2.141,209,1.557,210,4.962,211,4.517,212,1.775,213,2.141,214,2.52,215,2.52,216,2.52,217,0.949,218,4.562,219,2.52,220,3.838,221,2.52,222,2.52,223,2.52,224,5.014,225,2.52,226,2.52,227,2.52,228,2.52,229,2.52,230,2.831,231,2.52,232,2.52,233,2.52,234,2.52,235,2.52,236,2.52]],["title/classes/ArticlesGateway.html",[0,0.271,195,2.14]],["body/classes/ArticlesGateway.html",[0,0.286,2,2.481,3,0.196,4,0.168,5,0.14,7,1.638,8,4.719,9,0.255,10,1.638,11,3.76,12,0.712,13,5.045,14,1.451,15,0.856,17,3.04,18,0.024,19,4.719,21,0.86,22,1.38,23,0.531,24,3.114,25,4.181,26,3.114,27,2.751,28,2.751,29,2.481,30,3.114,31,3.114,32,0.196,36,3.114,48,2.481,50,0.012,51,0.016,52,0.012,77,0.804,78,0.746,80,0.804,130,2.41,144,1.206,152,1.795,156,3.694,195,3.04,237,3.114,238,4.919,239,4.919,240,4.919,241,4.919,242,3.664,243,4.919,244,4.719,245,4.919,246,3.664,247,3.664,248,4.919,249,3.664,250,4.919,251,3.664,252,3.114,253,4.919,254,3.33,255,3.664,256,3.664,257,2.751,258,3.664,259,2.751,260,3.114,261,3.664,262,4.919,263,2.481,264,2.481,265,3.664,266,3.664,267,2.751,268,3.664,269,3.664]],["title/modules/ArticlesModule.html",[53,1.226,64,2.14]],["body/modules/ArticlesModule.html",[0,0.287,3,0.197,4,0.168,5,0.141,7,1.223,12,0.713,15,0.493,18,0.024,21,0.532,22,1.383,23,0.634,32,0.197,50,0.012,51,0.016,52,0.012,53,1.968,55,1.799,56,1.935,57,2.269,58,2.269,59,1.935,60,3.163,61,2.803,64,4.093,66,3.361,68,3.045,69,2.089,70,2.269,72,3.335,73,2.486,74,3.335,75,4.022,77,0.532,78,0.493,79,0.287,80,0.532,81,3.335,83,3.335,84,2.486,85,0.572,89,2.486,97,2.414,100,3.699,102,2.486,131,1.473,132,1.935,153,3.764,156,2.757,188,3.629,189,3.121,195,3.045,270,3.121,271,3.672,272,3.121,273,3.672,274,3.335,275,3.672,276,3.672,277,4.175,278,3.672,279,3.672,280,3.672,281,3.121,282,2.486,283,3.672,284,3.121,285,3.672,286,3.699,287,3.699,288,3.672,289,3.672,290,3.672,291,3.121,292,3.699,293,3.121,294,3.121,295,2.757,296,2.757,297,3.121,298,3.121]],["title/injectables/ArticlesService.html",[101,0.271,188,1.97]],["body/injectables/ArticlesService.html",[0,0.24,3,0.165,4,0.141,5,0.118,9,0.214,12,0.631,14,0.803,15,0.811,18,0.024,21,0.842,23,0.594,32,0.165,50,0.01,51,0.014,52,0.01,77,0.842,78,0.781,79,0.24,80,0.842,85,0.478,101,0.34,103,0.853,105,1.679,107,2.611,108,1.725,110,3.701,119,0.963,124,0.803,125,1.618,128,1.748,129,0.963,130,2.698,140,2.611,141,1.023,142,0.626,144,1.262,149,1.715,157,3.271,160,4.679,184,3.701,185,3.271,188,2.478,217,2.189,299,2.611,300,4.356,301,3.072,302,4.356,303,3.072,304,4.356,305,3.072,306,3.072,307,4.356,308,4.088,309,3.072,310,4.356,311,3.072,312,2.611,313,2.611,314,1.505,315,3.072,316,2.08,317,2.611,318,2.08,319,2.611,320,2.08,321,2.611,322,2.611,323,2.849,324,3.072,325,2.849,326,3.593,327,4.94,328,4.94,329,4.94,330,3.072,331,3.072,332,3.072,333,3.072,334,3.072,335,3.072,336,3.072,337,3.072]],["title/controllers/AuthController.html",[152,1.697,338,2.344]],["body/controllers/AuthController.html",[0,0.191,3,0.131,4,0.112,5,0.094,9,0.17,12,0.534,15,0.846,17,3.895,18,0.024,21,0.913,23,0.553,32,0.131,50,0.008,51,0.012,52,0.008,77,0.862,78,0.799,79,0.465,80,0.862,85,0.381,97,1.198,105,1.732,116,2.677,120,3.387,122,1.118,142,0.498,144,1.369,149,1.859,152,1.198,155,1.836,182,1.655,187,1.836,191,1.391,192,1.836,193,1.118,194,1.836,199,1.511,338,2.495,339,2.078,340,2.445,341,3.132,342,3.132,343,4.939,344,4.197,345,3.686,346,3.686,347,3.686,348,3.686,349,3.686,350,4.197,351,3.132,352,2.445,353,3.686,354,2.445,355,4.632,356,2.445,357,3.686,358,2.445,359,3.686,360,2.445,361,3.686,362,2.445,363,2.445,364,3.686,365,2.445,366,2.445,367,3.686,368,2.445,369,2.445,370,3.686,371,2.445,372,2.445,373,3.686,374,2.445,375,2.445,376,3.686,377,2.445,378,3.686,379,2.445,380,2.445,381,3.686,382,2.445,383,2.445,384,1.836,385,2.337,386,1.836,387,1.511,388,2.078,389,2.445,390,2.445,391,2.445,392,2.445,393,4.939,394,2.445,395,2.445,396,2.445,397,2.445,398,2.445,399,2.445,400,2.445,401,2.445,402,2.445,403,2.445,404,2.445,405,2.445,406,2.445]],["title/modules/AuthModule.html",[53,1.226,65,2.14]],["body/modules/AuthModule.html",[0,0.25,3,0.171,4,0.147,5,0.123,7,1.064,12,0.463,15,0.429,18,0.024,21,0.463,22,1.204,23,0.649,32,0.171,50,0.011,51,0.015,52,0.011,53,1.831,55,1.566,56,1.684,57,1.975,58,1.975,59,1.684,60,2.942,61,1.818,65,4.304,67,3.479,68,2.768,69,1.818,70,1.975,72,3.033,73,2.164,74,3.033,75,3.794,77,0.463,78,0.429,79,0.25,80,0.463,81,4.14,83,3.033,84,2.164,85,0.498,97,2.195,274,3.033,284,2.717,338,3.501,385,3.222,386,2.4,407,2.717,408,3.197,409,2.717,410,3.78,411,3.78,412,3.78,413,3.78,414,3.78,415,3.197,416,3.197,417,3.197,418,1.684,419,3.197,420,3.197,421,3.197,422,3.197,423,3.197,424,3.197,425,3.197,426,3.197,427,3.364,428,3.197,429,3.197,430,2.164,431,3.197,432,1.975,433,3.197,434,3.197,435,3.197,436,3.197,437,2.717,438,4.762,439,3.794,440,3.197,441,3.197,442,3.197,443,3.197,444,3.197,445,3.197,446,3.197]],["title/injectables/AuthService.html",[101,0.271,385,1.824]],["body/injectables/AuthService.html",[0,0.112,3,0.077,4,0.065,5,0.055,9,0.1,10,0.798,12,0.347,14,0.627,15,0.742,18,0.024,21,0.761,23,0.529,32,0.077,50,0.005,51,0.008,52,0.005,77,0.708,78,0.657,79,0.449,80,0.708,85,0.222,101,0.187,103,0.396,105,1.63,108,1.138,112,2.148,114,1.442,119,0.447,120,0.7,121,2.768,124,0.373,129,0.447,131,0.573,141,1.749,142,0.74,144,1.381,148,1.504,149,0.707,182,3.154,193,0.653,212,1.097,217,1.651,308,3.154,312,1.213,313,1.213,314,0.7,320,0.966,321,1.213,322,1.213,323,0.7,325,0.7,326,0.882,327,1.213,328,1.213,329,1.213,341,2.038,342,2.038,344,3.086,350,3.086,351,2.038,355,4.1,385,1.263,387,0.882,388,1.213,432,0.882,447,1.213,448,3.819,449,2.398,450,2.398,451,2.398,452,2.398,453,3.632,454,0.812,455,2.634,456,2.066,457,2.099,458,2.066,459,2.099,460,2.066,461,2.398,462,1.096,463,2.398,464,1.628,465,1.428,466,2.398,467,1.428,468,2.398,469,1.538,470,1.428,471,2.634,472,2.398,473,1.428,474,2.398,475,1.428,476,2.398,477,1.428,478,1.213,479,1.428,480,1.428,481,1.428,482,2.398,483,3.632,484,1.428,485,4.048,486,3.1,487,1.072,488,0.538,489,0.966,490,0.966,491,0.966,492,0.7,493,1.213,494,2.099,495,1.213,496,1.213,497,0.966,498,1.623,499,1.213,500,0.882,501,1.213,502,1.213,503,1.213,504,1.428,505,1.428,506,3.632,507,2.398,508,1.623,509,1.428,510,1.213,511,0.882,512,2.398,513,0.882,514,2.398,515,0.812,516,0.752,517,1.428,518,0.752,519,1.428,520,0.882,521,1.428,522,1.213,523,0.882,524,0.7,525,0.882,526,1.482,527,1.072,528,1.428,529,1.428,530,1.851,531,2.398,532,1.428,533,1.8,534,1.428,535,1.428,536,3.1,537,2.398,538,2.398,539,1.428,540,4.659,541,1.428,542,1.428,543,1.428,544,1.428,545,1.428,546,3.632,547,3.632,548,1.428,549,3.819,550,1.428,551,4.659,552,4.659,553,3.632,554,2.398,555,1.428,556,3.632,557,2.727,558,3.632,559,3.632,560,4.89,561,3.632,562,3.743,563,4.384,564,3.1,565,1.428,566,2.038,567,1.8,568,2.038,569,1.8,570,2.038,571,1.428,572,1.428,573,2.398,574,1.428,575,1.428,576,1.428,577,2.398,578,2.398,579,1.428,580,1.428,581,1.428,582,1.428,583,1.428,584,1.428,585,1.428,586,0.966,587,1.213,588,0.966,589,1.213,590,1.428,591,1.072,592,1.428,593,1.428,594,1.482,595,1.072,596,1.428,597,1.428,598,1.428,599,1.428,600,1.428,601,1.428,602,1.428,603,2.398,604,3.1,605,1.428,606,2.398,607,2.398,608,1.428]],["title/modules/DatabaseModule.html",[53,1.226,66,1.824]],["body/modules/DatabaseModule.html",[0,0.405,3,0.278,4,0.238,5,0.199,18,0.023,23,0.586,32,0.278,50,0.017,51,0.02,52,0.017,53,2.167,55,2.538,60,2.946,61,2.946,66,3.225,85,0.806,609,5.179,610,4.893,611,5.179]],["title/classes/EnvironmentService.html",[0,0.271,612,1.97]],["body/classes/EnvironmentService.html",[0,0.341,2,2.951,3,0.234,4,0.2,5,0.167,9,0.304,10,1.834,12,0.798,14,1.139,15,0.811,18,0.024,21,0.631,23,0.527,32,0.234,50,0.014,51,0.018,52,0.014,77,0.798,78,0.74,79,0.496,80,0.798,141,2.011,142,1.231,144,0.947,469,1.614,478,3.705,594,2.694,612,3.134,613,3.705,614,6.04,615,5.509,616,5.509,617,4.36,618,5.509,619,4.36,620,4.36,621,3.705,622,4.36,623,4.36,624,4.36,625,4.36,626,4.36,627,4.36]],["title/injectables/FacebookStrategy.html",[101,0.271,410,2.14]],["body/injectables/FacebookStrategy.html",[0,0.24,3,0.165,4,0.141,5,0.118,9,0.215,12,0.632,14,1.14,15,0.586,18,0.024,21,0.446,22,1.643,23,0.578,32,0.165,50,0.01,51,0.014,52,0.01,77,0.446,78,0.586,79,0.24,80,0.446,85,0.479,101,0.341,103,0.855,105,0.757,106,1.235,108,1.727,114,1.287,119,0.964,124,0.804,129,0.964,131,1.749,141,1.937,142,0.889,144,1.1,148,1.246,149,1.287,212,1.089,217,1.643,323,1.508,325,1.508,410,2.695,418,1.621,455,3.706,456,3.135,462,2.317,464,1.452,469,1.171,488,1.159,489,2.084,492,1.508,493,2.615,494,2.084,500,1.902,501,2.615,511,1.902,513,1.902,515,2.481,516,3.401,518,2.903,523,1.902,525,3.131,526,1.902,530,1.407,562,2.084,628,2.311,629,3.731,630,3.078,631,3.078,632,3.078,633,3.275,634,2.084,635,3.429,636,2.084,637,3.078,638,2.615,639,3.078,640,2.615,641,3.078,642,3.078,643,3.078,644,3.078,645,3.275,646,3.275,647,2.311,648,1.902,649,4.305,650,2.615,651,2.615,652,2.615,653,3.078,654,3.078,655,3.078,656,3.078,657,3.804,658,1.902,659,2.695,660,2.615,661,2.615,662,3.706,663,2.615,664,2.615,665,4.305,666,2.084,667,3.078,668,3.078,669,3.706,670,2.615,671,2.615,672,2.084,673,2.615,674,3.078,675,3.078,676,3.078,677,3.078,678,3.078,679,3.078]],["title/injectables/GoogleStrategy.html",[101,0.271,411,2.14]],["body/injectables/GoogleStrategy.html",[0,0.256,3,0.176,4,0.15,5,0.126,9,0.229,12,0.66,14,1.192,15,0.612,18,0.024,21,0.475,22,1.717,23,0.605,32,0.176,50,0.011,51,0.015,52,0.011,77,0.475,78,0.44,79,0.256,80,0.475,85,0.51,101,0.356,103,0.911,105,0.806,106,1.315,108,1.776,114,0.967,119,1.028,124,0.857,129,1.028,131,1.315,141,1.983,142,0.929,144,0.712,148,1.289,149,1.345,157,2.462,212,1.614,217,1.717,244,2.787,323,1.607,325,1.607,326,2.026,411,2.818,418,1.727,459,3.087,460,3.224,462,2.397,464,1.092,469,1.054,488,1.235,491,2.22,492,1.607,494,2.22,496,2.787,500,2.026,503,2.787,511,2.026,513,2.026,515,1.865,516,2.402,518,1.727,523,2.818,525,3.24,526,2.026,530,1.5,566,2.787,587,2.787,589,2.787,629,3.836,634,2.22,636,2.22,638,2.787,640,2.787,645,3.424,646,3.424,647,3.424,648,2.026,649,3.875,650,2.787,651,2.787,652,2.787,657,3.936,658,2.026,659,2.818,660,2.787,661,2.787,662,2.787,663,2.787,664,2.787,666,2.22,670,2.787,671,2.787,672,2.22,680,3.936,681,2.462,682,3.279,683,3.279,684,3.279,685,4.56,686,2.787,687,3.424,688,3.087,689,2.462,690,3.279,691,3.279,692,3.279,693,3.279,694,4.56,695,4.56,696,3.279,697,4.56,698,3.279]],["title/interfaces/IArticle.html",[125,1.824,699,0.851]],["body/interfaces/IArticle.html",[3,0.251,4,0.215,5,0.179,9,0.326,10,1.918,18,0.023,23,0.448,32,0.251,50,0.015,51,0.019,52,0.015,79,0.487,124,1.223,125,3.034,130,2.822,201,2.663,469,1.573,557,4.887,699,1.534,700,2.003,701,3.978,702,5.759,703,4.324,704,5.301,705,4.887,706,5.531,707,4.684]],["title/interfaces/IConfig.html",[699,0.851,708,2.14]],["body/interfaces/IConfig.html",[3,0.161,4,0.138,5,0.115,9,0.209,10,1.426,15,0.403,18,0.024,23,0.41,32,0.161,33,3.381,37,2.031,41,3.381,50,0.01,51,0.014,52,0.01,79,0.335,138,1.58,148,1.228,201,1.706,217,1.13,257,4.09,259,3.75,263,2.031,264,3.688,267,3.216,469,1.505,524,1.47,594,2.646,612,2.436,699,1.416,700,1.283,708,3.702,709,2.031,710,4.946,711,3.639,712,4.205,713,3.639,714,3.639,715,3.639,716,3.639,717,3.639,718,3.639,719,3.639,720,3.639,721,3.75,722,3.75,723,3.639,724,3.75,725,3.639,726,3.9,727,3.9,728,2.999,729,2.999,730,2.549,731,2.031,732,2.549,733,2.252,734,2.549,735,2.549,736,2.549,737,2.549,738,2.549,739,2.549,740,2.549,741,3.9,742,3.75,743,3.75,744,3.216,745,3.75,746,3.9,747,3.75,748,3.75,749,3.75,750,3.75,751,3.75,752,2.252,753,3.216,754,2.252,755,2.252,756,2.252,757,2.252,758,2.252,759,2.252,760,2.252,761,2.252,762,2.252,763,2.252,764,2.252,765,2.252,766,2.899,767,2.252,768,2.252,769,2.252,770,2.252,771,2.252,772,2.031,773,3.216,774,3.216,775,2.252,776,2.252,777,2.252,778,2.252,779,2.252,780,2.252]],["title/interfaces/IEnvironmentConfig.html",[699,0.851,712,2.14]],["body/interfaces/IEnvironmentConfig.html",[3,0.15,4,0.128,5,0.107,9,0.195,10,1.356,18,0.024,23,0.39,32,0.15,33,3.25,37,1.893,41,2.756,50,0.009,51,0.013,52,0.009,79,0.501,138,1.473,148,1.18,201,1.591,217,1.053,257,4.208,259,3.605,263,1.893,264,3.57,267,2.1,469,1.621,524,1.37,594,1.728,612,2.316,699,1.378,700,1.197,708,3.259,709,1.893,710,4.876,711,2.377,712,3.961,713,2.377,714,2.377,715,2.377,716,2.377,717,2.377,718,2.377,719,2.377,720,2.377,721,3.057,722,3.057,723,2.377,724,3.057,725,2.377,726,2.756,727,2.756,730,2.377,731,1.893,732,2.377,733,2.1,734,3.46,735,3.46,736,3.46,737,3.46,738,3.46,739,3.46,740,3.46,741,4.188,742,4.392,743,4.392,744,4.392,745,4.392,746,4.188,747,4.392,748,4.392,749,4.392,750,4.392,751,4.392,752,2.1,753,3.057,754,2.1,755,2.1,756,2.1,757,2.1,758,2.1,759,2.1,760,2.1,761,2.1,762,2.1,763,2.1,764,2.1,765,2.1,766,2.756,767,2.1,768,2.1,769,2.1,770,2.1,771,2.1,772,1.893,773,3.057,774,3.057,775,2.1,776,2.1,777,2.1,778,2.1,779,2.1,780,2.1]],["title/interfaces/IFacebookConfig.html",[456,1.97,699,0.851]],["body/interfaces/IFacebookConfig.html",[3,0.241,4,0.206,5,0.172,9,0.313,10,1.869,18,0.023,32,0.241,50,0.015,51,0.018,52,0.015,79,0.526,142,1.372,456,3.193,469,1.668,586,4.342,588,4.342,699,1.104,700,1.921,781,3.816,782,3.04,783,4.342,784,4.342,785,4.342,786,5.451]],["title/interfaces/IGoogleConfig.html",[460,1.97,699,0.851]],["body/interfaces/IGoogleConfig.html",[3,0.228,4,0.195,5,0.163,9,0.297,10,1.807,18,0.023,32,0.228,50,0.014,51,0.018,52,0.014,79,0.534,142,1.393,460,3.088,469,1.677,586,4.26,588,4.26,591,4.724,699,1.047,700,1.822,782,2.883,783,4.26,784,4.26,785,4.26,787,3.619,788,5.347,789,5.347]],["title/interfaces/IJwtPayload.html",[699,0.851,790,2.344]],["body/interfaces/IJwtPayload.html",[3,0.262,4,0.224,5,0.187,9,0.341,10,1.969,18,0.023,32,0.262,50,0.016,51,0.019,52,0.016,79,0.497,142,1.296,469,1.47,699,1.202,700,2.091,744,5.162,790,4.003,791,4.154,792,4.154,793,6.606,794,6.606,795,6.606]],["title/interfaces/IToken.html",[387,2.14,699,0.851]],["body/interfaces/IToken.html",[3,0.279,4,0.239,5,0.2,9,0.363,10,2.046,18,0.023,32,0.279,50,0.017,51,0.02,52,0.017,79,0.407,142,1.062,387,3.797,469,1.51,530,3.086,699,1.281,700,2.23,796,4.429]],["title/interfaces/ITwitterConfig.html",[458,1.97,699,0.851]],["body/interfaces/ITwitterConfig.html",[3,0.241,4,0.206,5,0.172,9,0.313,10,1.869,18,0.023,32,0.241,50,0.015,51,0.018,52,0.015,79,0.526,142,1.372,458,3.193,469,1.668,567,4.816,569,4.816,699,1.104,700,1.921,782,3.04,783,4.342,784,4.342,785,4.342,797,3.816,798,5.451]],["title/interfaces/IUser.html",[464,1.153,699,0.851]],["body/interfaces/IUser.html",[3,0.189,4,0.162,5,0.135,9,0.246,10,1.595,18,0.023,23,0.337,32,0.189,50,0.012,51,0.016,52,0.012,79,0.548,124,0.921,193,2.671,464,1.595,469,1.677,508,3.955,511,3.61,513,3.61,515,3.323,516,3.077,518,3.077,520,3.61,523,3.61,525,3.61,527,4.386,595,4.088,666,3.955,699,0.866,700,1.508,703,3.598,704,4.626,705,4.386,707,4.732,799,2.994,800,4.964,801,4.964,802,4.964,803,4.964,804,4.732]],["title/injectables/JwtStrategy.html",[101,0.271,412,2.14]],["body/injectables/JwtStrategy.html",[0,0.307,3,0.211,4,0.18,5,0.151,9,0.274,12,0.747,14,1.028,15,0.693,18,0.024,21,0.57,23,0.634,32,0.211,50,0.013,51,0.017,52,0.013,77,0.747,78,0.693,79,0.403,80,0.747,85,0.613,101,0.403,103,1.093,105,1.415,114,1.697,117,3.187,129,1.233,142,0.802,144,0.854,148,0.967,149,1.161,199,2.431,212,2.037,274,3.895,314,1.928,384,2.954,385,3.427,386,2.954,412,3.187,418,2.073,439,2.664,464,1.717,492,1.928,533,2.954,648,3.555,659,2.431,703,2.954,790,4.134,805,3.343,806,3.491,807,3.934,808,3.934,809,5.157,810,3.934,811,3.934,812,3.934,813,3.934,814,3.343,815,3.343,816,3.934,817,3.934,818,3.934,819,3.934,820,3.934,821,3.934,822,3.934,823,3.934,824,3.343]],["title/injectables/LocalStrategy.html",[101,0.271,413,2.14]],["body/injectables/LocalStrategy.html",[0,0.293,3,0.201,4,0.172,5,0.144,9,0.261,12,0.723,14,1.305,15,0.671,18,0.024,21,0.543,22,1.881,23,0.627,32,0.201,50,0.012,51,0.016,52,0.012,77,0.543,78,0.503,79,0.293,80,0.543,85,0.583,101,0.39,103,1.041,105,0.921,106,1.503,108,1.877,114,1.105,117,2.316,119,1.174,124,0.979,127,1.836,129,1.174,141,1.994,142,0.764,144,1.084,148,0.921,149,1.105,212,1.988,217,1.411,323,1.836,325,1.836,413,3.086,418,2.631,437,3.184,439,3.802,454,2.132,462,2.284,464,1.663,469,1.154,488,1.411,492,1.836,497,2.537,498,2.537,499,3.184,500,2.316,516,3.155,520,3.471,522,3.184,524,1.836,549,2.814,629,4.055,636,2.537,648,2.316,658,2.316,659,2.316,814,4.244,824,4.244,825,3.184,826,3.747,827,3.747,828,3.747,829,3.747,830,3.747,831,3.747,832,3.747,833,3.747,834,3.747]],["title/injectables/LoggerMiddleware.html",[93,2.344,101,0.271]],["body/injectables/LoggerMiddleware.html",[0,0.362,3,0.248,4,0.212,5,0.177,7,1.541,9,0.323,12,0.828,15,0.622,18,0.023,21,0.67,22,1.743,23,0.547,32,0.248,50,0.015,51,0.019,52,0.015,77,0.67,78,0.622,79,0.362,80,0.67,85,0.721,93,3.872,101,0.447,103,1.285,106,2.294,111,3.013,112,3.041,113,3.415,114,1.831,116,1.856,118,3.013,148,1.138,448,3.475,835,3.933,836,4.628,837,4.294,838,5.719,839,4.628,840,4.628,841,4.628,842,4.628]],["title/guards/RolesGuard.html",[191,1.97,843,2.344]],["body/guards/RolesGuard.html",[0,0.306,3,0.21,4,0.18,5,0.15,7,1.304,9,0.273,12,0.744,14,1.023,15,0.69,18,0.024,21,0.567,23,0.622,32,0.21,50,0.013,51,0.017,52,0.013,77,0.744,78,0.69,79,0.402,80,0.744,85,0.61,101,0.402,105,1.411,108,1.227,116,1.571,119,1.227,124,1.023,129,1.227,142,0.798,144,1.116,148,1.498,190,2.94,191,2.925,193,2.351,199,2.42,212,1.82,314,1.919,355,3.48,464,1.304,469,0.905,487,2.94,488,1.475,843,2.651,844,3.328,845,6.095,846,3.916,847,6.496,848,3.916,849,5.141,850,6.095,851,3.916,852,3.916,853,3.328,854,3.328,855,3.328,856,3.916,857,3.916,858,3.916,859,3.916,860,3.328,861,3.916,862,2.94,863,5.141,864,3.916,865,3.916,866,3.916]],["title/injectables/TokenMiddleware.html",[95,2.344,101,0.271]],["body/injectables/TokenMiddleware.html",[0,0.296,3,0.203,4,0.174,5,0.145,7,1.262,9,0.264,12,0.729,14,0.991,15,0.676,18,0.024,21,0.549,23,0.628,32,0.203,50,0.012,51,0.017,52,0.012,77,0.729,78,0.676,79,0.393,80,0.729,85,0.59,95,3.406,101,0.393,103,1.052,105,1.389,106,2.018,108,1.886,111,2.651,112,2.768,113,3.17,114,1.666,116,1.52,118,2.651,119,1.188,120,2.948,121,3.17,122,1.733,124,0.991,129,1.188,141,1.262,142,0.772,144,0.823,148,0.932,149,1.118,314,1.857,323,1.857,325,1.857,326,2.342,454,2.156,462,2.301,464,1.262,487,2.846,488,1.427,530,2.301,533,2.846,837,3.778,854,3.221,855,3.221,862,3.778,867,3.221,868,3.79,869,3.79,870,2.566,871,5.032,872,5.032,873,3.79,874,3.79,875,2.846,876,2.846,877,3.79]],["title/injectables/TwitterStrategy.html",[101,0.271,414,2.14]],["body/injectables/TwitterStrategy.html",[0,0.278,3,0.191,4,0.163,5,0.137,9,0.248,12,0.699,14,1.261,15,0.648,18,0.024,21,0.516,22,1.818,23,0.605,32,0.191,50,0.012,51,0.016,52,0.012,77,0.516,78,0.478,79,0.278,80,0.516,85,0.554,101,0.377,103,0.989,105,0.876,106,1.429,108,1.839,114,1.051,119,1.116,124,0.931,129,1.116,131,1.936,141,2.042,142,0.984,144,0.773,148,1.443,149,1.424,193,1.629,212,1.708,217,1.818,287,2.674,323,1.745,325,1.745,414,2.982,418,1.876,457,3.267,458,3.338,462,2.503,464,1.823,469,1.116,488,1.341,490,2.411,492,1.745,494,2.411,495,3.027,500,2.201,502,3.027,510,3.027,515,2.745,518,2.542,526,2.201,530,1.629,562,2.411,568,3.027,570,3.027,629,3.972,634,2.411,636,2.411,645,2.674,646,2.674,647,3.624,648,2.201,657,4.11,658,2.201,659,2.982,665,3.027,672,2.411,673,3.027,878,2.674,879,3.562,880,3.562,881,3.562,882,3.624,883,3.383,884,3.562,885,3.562,886,3.562,887,3.562]],["title/injectables/UserIdMiddleware.html",[101,0.271,888,2.344]],["body/injectables/UserIdMiddleware.html",[0,0.302,3,0.207,4,0.178,5,0.148,7,1.289,9,0.27,12,0.739,14,1.011,15,0.685,18,0.024,21,0.56,23,0.603,32,0.207,48,2.62,50,0.013,51,0.017,52,0.013,77,0.739,78,0.685,79,0.399,80,0.739,85,0.602,101,0.399,103,1.075,105,1.403,106,2.046,108,1.901,111,2.687,112,2.796,113,3.322,114,1.683,116,1.552,117,2.392,118,2.687,119,1.213,120,1.896,121,2.039,122,1.77,123,2.62,124,1.011,127,1.896,129,1.213,137,2.62,141,1.289,142,0.789,144,1.239,145,3.153,147,2.906,148,1.403,149,1.142,151,3.289,212,2.148,454,2.202,462,2.333,464,1.289,488,1.457,492,1.896,870,2.62,875,2.906,876,2.906,888,3.454,889,3.289,890,3.87,891,3.87,892,2.62,893,3.87,894,3.87,895,3.87,896,3.87,897,3.87,898,3.87,899,3.87,900,3.289,901,3.87,902,3.289]],["title/injectables/UserService.html",[101,0.271,903,1.97]],["body/injectables/UserService.html",[0,0.234,3,0.16,4,0.137,5,0.209,9,0.209,12,0.619,14,0.782,15,0.828,18,0.024,21,0.867,23,0.573,32,0.16,50,0.01,51,0.014,52,0.01,77,0.892,78,0.828,79,0.334,80,0.892,85,0.466,101,0.334,103,0.831,105,1.698,108,1.706,119,0.938,124,0.782,129,0.938,141,0.997,142,0.61,144,1.3,148,1.338,149,1.606,212,1.927,308,3.378,314,1.467,316,2.027,317,2.544,318,2.027,319,2.544,355,4.053,454,1.703,462,2.489,464,1.812,488,1.128,508,2.027,520,1.85,524,2.096,635,3.378,672,2.027,688,2.895,870,2.027,875,2.248,876,2.248,883,3.083,903,2.433,904,2.544,905,3.634,906,3.634,907,3.634,908,4.277,909,4.277,910,2.994,911,4.277,912,2.994,913,4.277,914,2.994,915,2.994,916,4.277,917,2.994,918,2.544,919,2.994,920,4.277,921,2.994,922,4.277,923,2.994,924,4.277,925,2.994,926,2.994,927,2.994,928,2.994,929,2.994,930,2.994,931,2.994,932,2.994,933,2.994,934,2.994,935,2.994,936,2.994,937,2.994,938,5.443,939,5.443]],["title/controllers/UsersController.html",[152,1.697,940,2.344]],["body/controllers/UsersController.html",[0,0.195,3,0.134,4,0.115,5,0.191,9,0.174,12,0.543,15,0.754,17,3.471,18,0.024,21,0.813,23,0.537,32,0.134,50,0.008,51,0.012,52,0.008,53,0.885,77,0.813,78,0.754,80,0.813,85,0.389,89,1.693,97,1.225,105,1.656,116,2.65,122,1.143,131,2.004,132,1.317,134,2.369,142,0.51,144,1.22,148,1.106,149,1.578,152,2.203,155,1.878,165,4.96,182,1.693,183,3.821,185,3.376,186,2.125,187,1.878,190,3.376,191,1.422,192,1.878,193,2.664,194,1.878,198,2.125,199,1.545,201,3.408,202,2.125,203,3.185,204,1.878,205,2.125,206,2.125,207,2.125,208,3.185,209,1.545,210,4.95,212,2.371,213,2.125,218,4.547,220,2.125,230,1.878,292,3.376,438,2.125,530,1.143,862,2.815,902,3.185,903,2.558,905,3.185,906,3.185,907,3.185,918,2.125,940,2.538,941,2.125,942,3.748,943,3.748,944,2.501,945,2.501,946,5.617,947,2.501,948,2.501,949,2.501,950,2.501,951,2.501,952,2.501,953,2.501,954,2.501,955,2.501,956,2.501,957,2.501,958,2.501,959,2.501,960,2.501,961,2.501,962,2.501,963,2.501,964,2.501,965,2.501,966,2.501,967,2.125,968,2.125,969,2.815,970,2.501,971,2.501,972,4.496,973,2.501,974,2.501,975,2.501,976,2.501,977,2.501,978,2.501,979,2.501,980,2.501,981,2.501,982,2.501,983,2.501,984,3.748,985,2.501,986,2.501,987,2.501,988,2.501,989,2.501,990,2.501,991,2.501,992,2.501,993,2.501,994,2.501,995,2.501]],["title/modules/UsersModule.html",[53,1.226,67,1.97]],["body/modules/UsersModule.html",[0,0.3,3,0.206,4,0.176,5,0.147,7,1.277,12,0.734,15,0.515,18,0.024,21,0.555,22,1.444,23,0.618,32,0.206,50,0.013,51,0.017,52,0.013,53,2.011,55,1.879,56,2.02,57,2.369,58,2.369,59,2.02,60,3.232,61,2.884,66,3.402,67,3.804,68,3.133,69,2.181,70,2.369,72,3.432,73,2.596,74,3.432,75,4.092,77,0.555,78,0.515,79,0.3,80,0.555,81,3.432,83,3.432,84,2.596,85,0.597,89,2.596,97,2.484,100,2.879,131,1.538,132,2.02,274,3.432,281,3.258,286,2.879,287,2.879,291,3.258,292,3.807,293,3.258,294,3.258,295,2.879,296,2.879,297,3.258,298,3.258,888,2.596,903,3.674,940,3.846,968,3.258,996,3.258,997,3.834,998,3.258,999,3.834,1000,3.834,1001,3.834,1002,4.266,1003,3.834,1004,3.834,1005,3.834,1006,3.834]],["title/injectables/Verifier.html",[101,0.271,432,2.14]],["body/injectables/Verifier.html",[0,0.317,3,0.218,4,0.186,5,0.156,7,1.352,9,0.283,12,0.762,14,1.061,15,0.707,18,0.024,21,0.588,23,0.613,32,0.218,50,0.013,51,0.017,52,0.013,77,0.762,78,0.707,79,0.411,80,0.762,85,0.632,101,0.411,103,1.127,105,1.436,106,2.111,108,1.937,111,2.773,112,2.862,113,3.256,114,1.723,116,1.629,117,2.509,118,2.773,119,1.272,120,3.028,121,3.256,122,1.857,124,1.061,127,1.989,129,1.272,141,1.352,142,0.827,144,0.882,145,2.509,148,0.998,149,1.198,212,1.863,432,3.253,454,2.31,462,2.407,464,1.352,488,1.529,492,1.989,516,2.139,658,2.509,870,2.749,892,2.749,1007,3.45,1008,4.06,1009,4.06,1010,4.06,1011,4.06]],["title/injectables/articleValidatorMiddleware.html",[101,0.271,282,2.344]],["body/injectables/articleValidatorMiddleware.html",[0,0.3,3,0.206,4,0.176,5,0.147,7,1.28,9,0.268,12,0.735,14,1.486,15,0.682,18,0.024,21,0.556,23,0.631,32,0.206,50,0.017,51,0.017,52,0.013,77,0.556,78,0.516,79,0.3,80,0.556,85,0.598,101,0.397,103,1.067,105,1.398,106,2.037,108,1.204,111,2.675,112,2.787,113,3.187,114,1.678,116,1.542,118,2.675,119,1.204,120,1.883,121,2.024,122,1.757,123,2.602,124,1.004,125,2.024,126,2.886,127,1.883,128,2.186,129,1.204,130,2.488,131,2.037,132,2.024,133,2.886,134,2.024,135,2.602,136,2.886,137,2.602,138,2.024,139,2.602,144,0.835,145,2.375,148,1.398,254,3.438,282,3.438,469,0.888,806,2.602,892,2.602,1012,4.833,1013,2.886,1014,3.266,1015,3.843,1016,2.886,1017,3.813,1018,3.843,1019,3.266,1020,3.266,1021,3.266,1022,3.266,1023,3.266,1024,3.266,1025,3.266]],["title/injectables/bodyValidatorMiddleware.html",[101,0.271,430,2.344]],["body/injectables/bodyValidatorMiddleware.html",[0,0.295,3,0.202,4,0.173,5,0.145,7,1.256,9,0.263,12,0.726,14,1.473,15,0.674,18,0.024,21,0.546,23,0.628,32,0.202,50,0.016,51,0.016,52,0.012,77,0.546,78,0.507,79,0.295,80,0.546,85,0.587,101,0.392,103,1.048,105,1.386,106,2.012,108,1.182,111,2.643,112,2.761,113,3.164,114,1.662,116,1.513,118,2.643,119,1.182,120,1.849,121,1.988,122,1.725,123,2.554,124,0.986,125,1.988,126,2.833,127,1.849,128,2.146,129,1.182,130,2.458,131,2.012,132,2.969,133,2.833,134,1.988,135,2.554,136,2.833,137,2.554,138,1.988,139,2.554,144,0.819,145,2.332,148,1.386,252,3.206,254,3.396,308,2.554,430,3.396,469,0.872,806,2.554,892,2.554,1013,2.833,1014,3.206,1016,2.833,1019,3.206,1020,3.206,1021,3.206,1022,3.206,1023,3.206,1024,3.206,1025,3.206,1026,4.789,1027,3.773,1028,3.767,1029,3.773,1030,3.773,1031,3.206,1032,3.773,1033,3.773]],["title/coverage.html",[1034,3.555]],["body/coverage.html",[0,0.319,1,1.448,5,0.082,6,1.817,18,0.024,50,0.007,51,0.011,52,0.007,59,1.126,79,0.167,93,1.448,95,1.448,101,0.506,102,1.448,104,1.817,114,1.558,125,1.126,127,1.048,128,1.216,138,3.699,147,1.606,152,2,153,1.448,154,1.817,188,1.216,191,1.216,193,0.978,195,1.321,217,0.805,237,1.817,277,1.606,282,1.448,299,1.817,314,1.048,316,1.448,318,1.448,320,1.448,338,1.448,339,1.817,385,1.126,387,1.321,410,1.321,411,1.321,412,1.321,413,1.321,414,1.321,427,1.606,430,1.448,432,1.321,447,1.817,456,1.216,457,1.448,458,1.216,459,1.448,460,1.216,464,0.712,488,0.805,489,1.448,490,1.448,491,1.448,497,1.448,498,1.448,610,1.606,612,2.322,613,1.817,628,2.498,633,1.606,680,2.498,681,2.498,687,1.606,699,1.44,701,1.817,708,1.321,709,3.576,712,1.321,731,1.448,741,1.448,746,1.448,766,1.448,781,1.817,782,2.763,787,1.817,790,1.448,791,1.817,792,1.817,796,1.817,797,1.817,799,1.817,805,1.817,825,1.817,835,1.817,843,1.448,844,1.817,867,1.817,878,2.498,882,1.606,888,1.448,889,1.817,903,1.216,904,1.817,940,1.448,941,1.817,969,1.606,1002,1.606,1007,1.817,1012,1.817,1013,2.498,1017,2.498,1026,1.817,1028,1.606,1034,1.606,1035,2.138,1036,2.138,1037,6.092,1038,4.605,1039,1.817,1040,6.869,1041,2.827,1042,2.827,1043,5.5,1044,6.472,1045,1.817,1046,1.817,1047,3.326,1048,6.193,1049,2.138,1050,2.138,1051,1.606,1052,2.138,1053,3.469,1054,1.817,1055,2.827,1056,1.817,1057,1.817,1058,1.817,1059,5.282,1060,1.817,1061,2.138,1062,2.138,1063,1.817,1064,1.817,1065,2.138,1066,1.817,1067,2.138,1068,1.817,1069,3.469,1070,1.817,1071,1.817,1072,1.817,1073,2.138,1074,2.138,1075,1.817,1076,1.817,1077,3.065,1078,1.606,1079,1.817,1080,1.817,1081,1.817,1082,2.138,1083,5.182,1084,1.817,1085,1.817,1086,1.817,1087,1.817,1088,1.817,1089,1.817,1090,1.606,1091,2.827,1092,1.817,1093,2.138,1094,2.138]],["title/dependencies.html",[56,2.195,1095,2.888]],["body/dependencies.html",[0,0.391,11,2.548,18,0.024,27,2.826,29,2.548,50,0.012,51,0.016,52,0.012,56,1.983,85,0.586,122,1.721,124,0.984,384,2.826,418,3.385,524,2.454,530,2.574,621,3.199,635,2.548,686,3.199,688,2.548,689,2.826,772,2.548,815,4.256,837,2.826,853,3.199,883,2.326,967,4.256,1016,2.826,1031,3.199,1096,3.764,1097,3.764,1098,6.248,1099,3.764,1100,3.764,1101,5.009,1102,3.764,1103,3.764,1104,3.764,1105,3.764,1106,3.764,1107,3.764,1108,3.764,1109,3.764,1110,3.764,1111,3.764,1112,5.009,1113,3.764,1114,5.629,1115,5.009,1116,5.009,1117,3.764,1118,3.764,1119,3.764,1120,3.764,1121,3.764,1122,3.764,1123,3.764,1124,3.764,1125,3.764,1126,3.764,1127,3.764,1128,3.764,1129,3.764,1130,3.764,1131,3.764,1132,3.764,1133,3.764,1134,3.764,1135,3.764,1136,3.764,1137,3.764,1138,3.764,1139,3.764,1140,3.764,1141,3.764,1142,3.764,1143,3.764,1144,3.764,1145,3.764,1146,3.764,1147,3.764,1148,3.764,1149,3.764,1150,3.764,1151,3.764,1152,3.764,1153,3.764,1154,3.764]],["title/miscellaneous/functions.html",[1155,1.955,1156,3.541]],["body/miscellaneous/functions.html",[5,0.213,9,0.307,18,0.023,50,0.014,51,0.018,52,0.014,59,3.198,77,0.951,78,0.882,80,0.951,114,1.3,134,2.321,209,2.723,254,2.983,260,3.744,286,3.309,316,3.755,320,3.755,518,2.321,549,4.558,562,3.755,594,2.723,731,3.755,804,4.165,1041,3.744,1042,5.158,1045,4.713,1046,3.744,1058,3.744,1077,3.309,1078,4.165,1092,3.744,1155,2.983,1156,3.744,1157,4.406,1158,4.406,1159,5.546,1160,4.406,1161,3.744,1162,4.406,1163,4.406,1164,4.406,1165,4.406,1166,4.406,1167,4.406,1168,4.406,1169,3.744,1170,4.406,1171,4.406,1172,4.406,1173,4.406,1174,4.406,1175,4.406]],["title/index.html",[9,0.201,1176,2.888,1177,2.888]],["body/index.html",[4,0.193,11,2.846,18,0.023,50,0.014,51,0.018,52,0.014,82,5.322,201,2.392,296,4.972,726,2.846,727,2.846,883,2.598,1034,3.157,1178,4.205,1179,4.205,1180,5.384,1181,4.205,1182,4.205,1183,4.205,1184,4.205,1185,4.205,1186,4.205,1187,4.205,1188,4.205,1189,4.205,1190,4.205,1191,4.205,1192,4.205,1193,5.939,1194,6.733,1195,4.205,1196,4.205,1197,4.205,1198,4.205,1199,4.205,1200,5.384,1201,4.205,1202,4.205,1203,5.939,1204,4.205,1205,5.384,1206,4.205,1207,4.205,1208,4.205,1209,4.575,1210,5.384,1211,5.384,1212,4.205,1213,4.205,1214,4.205,1215,4.205,1216,4.205,1217,4.205,1218,4.205,1219,4.205,1220,4.205,1221,3.573,1222,4.205,1223,4.205,1224,4.205,1225,4.205,1226,4.205,1227,4.205,1228,4.205,1229,4.205,1230,4.205,1231,4.205,1232,4.205,1233,4.205,1234,4.205]],["title/modules.html",[55,2.32]],["body/modules.html",[18,0.02,50,0.017,51,0.02,52,0.017,54,3.517,55,2.546,64,3.211,65,3.211,66,2.737,67,2.955,1209,5.728,1235,6.741,1236,6.741,1237,6.877,1238,5.195,1239,5.195]],["title/overview.html",[1240,4.023]],["body/overview.html",[2,2.722,18,0.023,48,2.722,50,0.013,51,0.017,52,0.013,53,1.423,54,4.664,55,1.97,56,2.118,57,2.485,58,2.485,59,2.118,60,2.287,61,2.287,62,3.417,63,3.417,64,4.118,65,4.401,66,3.363,67,3.843,68,3.232,69,2.287,70,2.485,97,1.97,103,1.116,188,3.307,270,3.417,272,3.417,385,3.063,407,3.417,409,3.417,410,3.593,411,3.593,412,3.593,413,3.593,414,3.593,700,1.72,843,2.722,903,3.307,996,3.417,998,3.417,1051,3.019,1240,3.417,1241,4.02,1242,4.445,1243,4.02]],["title/injectables/sharedVariables.html",[101,0.271,1090,2.6]],["body/injectables/sharedVariables.html",[0,0.339,3,0.232,4,0.199,5,0.166,9,0.302,10,1.828,12,0.795,15,0.809,18,0.024,21,0.628,22,1.633,23,0.525,28,3.256,29,2.936,32,0.232,50,0.014,51,0.018,52,0.014,77,0.628,78,0.582,79,0.339,80,0.628,85,0.675,101,0.429,103,1.204,114,1.279,141,2.006,209,3.393,217,2.068,469,1.464,524,2.125,1088,5.383,1089,3.685,1090,4.123,1244,6.026,1245,6.026,1246,5.491,1247,5.491,1248,4.337,1249,4.666,1250,5.491,1251,4.337,1252,5.491,1253,5.491,1254,4.337,1255,4.337,1256,3.256,1257,4.337]],["title/miscellaneous/variables.html",[1155,1.955,1256,3.129]],["body/miscellaneous/variables.html",[0,0.106,9,0.208,18,0.024,33,2.019,37,0.917,41,0.917,50,0.004,51,0.008,52,0.004,69,0.77,78,0.308,79,0.532,105,0.333,108,0.719,119,0.719,124,0.354,127,1.124,128,1.697,130,1.72,134,0.713,135,0.917,138,1.849,144,0.762,149,0.399,165,1.722,193,1.796,204,1.017,209,4.12,212,1.609,217,1.8,230,3.412,263,0.917,264,0.917,277,1.722,295,1.017,314,1.124,318,1.552,323,0.663,325,0.663,326,0.837,427,1.722,439,0.917,448,1.722,456,0.77,457,2.019,458,0.77,459,2.019,460,0.77,469,1.455,471,1.151,488,1.123,489,2.019,490,2.019,491,2.019,497,1.552,498,1.552,508,2.659,511,1.417,513,1.417,515,0.77,516,1.849,518,2.247,520,3.183,523,1.417,524,1.124,525,0.837,526,0.837,527,1.017,530,1.95,557,1.722,567,1.017,569,1.017,586,1.552,588,1.552,591,1.017,595,1.017,610,1.722,612,1.997,628,1.017,633,1.722,634,2.019,635,0.917,666,0.917,669,1.151,680,1.017,681,1.722,687,1.722,688,0.917,689,1.017,705,1.722,706,2.535,707,3.203,708,0.837,709,0.917,710,2.949,712,0.837,721,1.017,722,1.017,724,1.017,726,1.552,727,1.552,733,2.24,741,2.659,742,1.722,743,1.722,745,1.722,746,2.659,747,1.722,748,1.722,749,1.722,750,1.722,751,1.722,752,1.017,753,1.722,754,1.017,755,1.017,756,1.017,757,1.017,758,1.017,759,1.017,760,1.017,761,1.017,762,1.017,763,1.017,764,1.017,765,1.017,766,1.552,767,1.017,768,1.017,769,1.017,770,1.017,771,1.017,772,0.917,773,1.722,774,1.722,775,1.017,776,1.017,777,1.017,778,1.017,779,1.017,780,1.017,783,2.019,784,2.019,785,2.019,786,1.151,788,1.151,789,1.151,798,1.151,800,1.151,801,1.151,802,1.151,803,1.151,804,2.949,806,0.917,860,4.505,878,1.017,882,1.722,883,0.837,900,1.151,969,1.722,1002,1.722,1017,2.949,1028,1.722,1037,1.151,1039,1.151,1043,1.151,1051,1.017,1053,1.151,1054,3.337,1055,1.151,1056,2.983,1057,1.151,1060,1.151,1063,1.151,1064,1.151,1066,1.151,1068,1.151,1069,3.624,1070,2.535,1071,1.151,1072,1.151,1075,1.151,1076,1.949,1077,1.017,1078,1.017,1079,1.949,1080,2.535,1081,1.151,1083,1.151,1084,3.337,1085,1.949,1086,1.949,1087,1.949,1091,1.151,1155,0.917,1161,1.949,1169,1.949,1221,2.535,1242,1.151,1249,5.766,1256,1.017,1258,5.301,1259,1.354,1260,1.354,1261,1.354,1262,1.354,1263,1.354,1264,3.51,1265,2.293,1266,2.983,1267,1.354,1268,1.354,1269,2.293,1270,2.293,1271,1.354,1272,1.354,1273,1.354,1274,1.354,1275,1.354,1276,1.354,1277,1.354,1278,1.354,1279,1.354,1280,1.354,1281,2.293,1282,2.293,1283,1.354,1284,1.354,1285,1.354,1286,1.354,1287,1.354,1288,1.354,1289,1.354,1290,1.354,1291,1.354,1292,2.983,1293,3.51,1294,1.354,1295,2.293,1296,3.927,1297,4.779,1298,2.293,1299,1.354,1300,1.354,1301,4.979,1302,1.354,1303,1.354,1304,1.354,1305,1.354,1306,1.354,1307,1.354,1308,2.983,1309,1.354,1310,1.354,1311,1.354,1312,1.354,1313,1.354,1314,1.354,1315,1.354,1316,1.354,1317,1.354,1318,1.354,1319,1.354,1320,1.354,1321,1.354,1322,1.354,1323,1.354,1324,1.354,1325,1.354,1326,1.354,1327,1.354,1328,1.354,1329,2.293,1330,1.354,1331,1.354,1332,1.354,1333,1.354,1334,1.354,1335,1.354,1336,2.293,1337,1.354,1338,1.354,1339,1.354,1340,1.354,1341,1.354,1342,2.293,1343,1.354,1344,1.354,1345,1.354,1346,1.354,1347,1.354,1348,1.354,1349,1.354,1350,1.354,1351,1.354,1352,1.354,1353,1.354,1354,1.354,1355,1.354,1356,1.354,1357,1.354,1358,1.354,1359,1.354,1360,1.354,1361,1.354,1362,2.983,1363,1.354,1364,1.354,1365,1.354,1366,1.354,1367,1.354,1368,1.354,1369,1.354,1370,1.354,1371,2.293,1372,1.354,1373,1.354,1374,2.293,1375,1.354,1376,1.354,1377,1.354,1378,1.354,1379,1.354,1380,1.354,1381,2.293,1382,1.354,1383,1.354,1384,1.354,1385,1.354,1386,1.354,1387,1.354,1388,1.354,1389,1.354,1390,1.354,1391,1.354,1392,1.354,1393,1.354,1394,1.354,1395,1.354,1396,1.354,1397,1.354,1398,1.354]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1037,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.43",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["0.1.12",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":48,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"injectables/UserIdMiddleware.html":{},"overview.html":{}}}],["1.0.0",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["1.0.33",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1062,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1043,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["1337",{"_index":768,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["1338",{"_index":769,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["14.3.1",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["14.3.2",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":1243,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["2.437.0",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["2.48.1",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["2.7.6",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["2.9.0",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1242,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["3.3.2",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["3.4.4",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["30000",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["342352192956",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["4.5.4",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["448307408974851",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["48h",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["4bef83a9a03d5c81445896dbc623b01d",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1241,"title":{},"body":{"overview.html":{}}}],["5.3.25",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["5.3.3",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["5.5.0",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.0.0",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["6.0.1",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1051,"title":{},"body":{"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["9_",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["_",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_id",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_uri",{"_index":783,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":645,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["active",{"_index":800,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["additionalprovidersdata",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["aditional",{"_index":202,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["admin",{"_index":165,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["admin')@useinterceptors(undefined",{"_index":962,"title":{},"body":{"controllers/UsersController.html":{}}}],["administrator",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterinit",{"_index":13,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["al",{"_index":36,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["allowedroutes",{"_index":893,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["allowedroutes.indexof(req.params.id",{"_index":896,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["already",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":1217,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1188,"title":{},"body":{"index.html":{}}}],["anonymous",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["another",{"_index":297,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["api",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/articles",{"_index":211,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["api/articles/:articleid",{"_index":224,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["api/users",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/:id",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/me",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/upload",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1197,"title":{},"body":{"index.html":{}}}],["app.gateway",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["appgateway",{"_index":1,"title":{"classes/AppGateway.html":{}},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/x",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["applications",{"_index":1185,"title":{},"body":{"index.html":{}}}],["apply(articlevalidatormiddleware",{"_index":285,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["apply(authenticate('facebook",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(authenticate('google",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(authenticate('local",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(authenticate('twitter",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(bodyvalidatormiddleware",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(loggermiddleware",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(useridmiddleware",{"_index":1005,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":54,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["article",{"_index":130,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"interfaces/IArticle.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["article.content",{"_index":333,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.creator",{"_index":221,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["article.remove",{"_index":337,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.save",{"_index":335,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.title",{"_index":331,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.updateattributes(body",{"_index":336,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article_model_token",{"_index":128,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["articleidmiddleware",{"_index":102,"title":{"injectables/ArticleIdMiddleware.html":{}},"body":{"injectables/ArticleIdMiddleware.html":{},"modules/ArticlesModule.html":{},"coverage.html":{}}}],["articlemodel",{"_index":110,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["articleproviders",{"_index":277,"title":{},"body":{"modules/ArticlesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["articles",{"_index":156,"title":{},"body":{"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{}}}],["articles.controller",{"_index":276,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles.gateway",{"_index":279,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles.providers",{"_index":278,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles.service",{"_index":189,"title":{},"body":{"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{}}}],["articles/:articleid",{"_index":290,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles/articles.gateway",{"_index":196,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["articles/interfaces/article.interface",{"_index":126,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["articles/joi/article.joi",{"_index":1018,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{}}}],["articles/middlewares/article",{"_index":283,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articleschema",{"_index":1017,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["articlescontroller",{"_index":153,"title":{"controllers/ArticlesController.html":{}},"body":{"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"coverage.html":{}}}],["articlesgateway",{"_index":195,"title":{"classes/ArticlesGateway.html":{}},"body":{"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"coverage.html":{}}}],["articlesmodule",{"_index":64,"title":{"modules/ArticlesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules.html":{},"overview.html":{}}}],["articlesservice",{"_index":188,"title":{"injectables/ArticlesService.html":{}},"body":{"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"coverage.html":{},"overview.html":{}}}],["articlessocket",{"_index":200,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["articlevalidatormiddleware",{"_index":282,"title":{"injectables/articleValidatorMiddleware.html":{}},"body":{"modules/ArticlesModule.html":{},"injectables/articleValidatorMiddleware.html":{},"coverage.html":{}}}],["asignamos",{"_index":759,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":105,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":429,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.providers",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["authcontroller",{"_index":338,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{}}}],["authenticated",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["authguard",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":65,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1227,"title":{},"body":{"index.html":{}}}],["authorization_code",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authproviders",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":385,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authuserschema",{"_index":1028,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["autoreconnect",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":1239,"title":{},"body":{"modules.html":{}}}],["await",{"_index":149,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["awskey",{"_index":750,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["awssecret",{"_index":751,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1218,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":892,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["badrequestexception(`validation",{"_index":1024,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["based",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["bash",{"_index":1193,"title":{},"body":{"index.html":{}}}],["basic",{"_index":1253,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["bearer",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":295,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":1255,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["behaviorsubject('first",{"_index":1252,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["blank",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":308,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["body.content",{"_index":334,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["body.error",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.title",{"_index":332,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["bodyvalidatormiddleware",{"_index":430,"title":{"injectables/bodyValidatorMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["boolean",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1237,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1235,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1181,"title":{},"body":{"index.html":{}}}],["cada",{"_index":34,"title":{},"body":{"classes/AppGateway.html":{}}}],["callback",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{}}}],["called",{"_index":857,"title":{},"body":{"guards/RolesGuard.html":{}}}],["calling",{"_index":293,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["canactivate",{"_index":845,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":849,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":325,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["chalk",{"_index":837,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"dependencies.html":{}}}],["chalk.default",{"_index":840,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["changesimplestring",{"_index":1246,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["changesimplestring(string",{"_index":1247,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["characters",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"classes/EnvironmentService.html":{}},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"classes/EnvironmentService.html":{},"overview.html":{}}}],["client",{"_index":247,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["client_id",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["client_id=${this.fbconfig.client_id",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id=${this.googleconfig.client_id",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_secret",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["client_secret=${this.fbconfig.client_secret",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["clientid",{"_index":638,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":640,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlesmodule",{"_index":270,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_articlesmodule_imports",{"_index":271,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["cluster_articlesmodule_providers",{"_index":272,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":996,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":997,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":998,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["code=${code",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/helpers/converters",{"_index":319,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{}}}],["common/helpers/error",{"_index":321,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["common/helpers/utils",{"_index":317,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{}}}],["common/middlewares/logger.middleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/token.middleware",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["communication",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["con",{"_index":718,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["conditional",{"_index":654,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["conexión",{"_index":35,"title":{},"body":{"classes/AppGateway.html":{}}}],["config",{"_index":766,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.interface",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["config.interface.ts",{"_index":782,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"coverage.html":{}}}],["config.ts",{"_index":1069,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/multer",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["config[env",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configure",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["connect(`${server_config.db",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection",{"_index":1293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.model('article",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.model('user",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consecutive",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('conchasumare",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('hi",{"_index":1032,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["console.log('initializing",{"_index":252,"title":{},"body":{"classes/ArticlesGateway.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["console.log('roles",{"_index":856,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(`connecting",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(ex",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(log.white(logmessage",{"_index":842,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(this.server.authenticatedusers",{"_index":49,"title":{},"body":{"classes/AppGateway.html":{}}}],["console.log(url",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":148,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["constante",{"_index":758,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ArticleIdMiddleware.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["constructor(@inject(article_model_token",{"_index":140,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["constructor(@inject(user_model_token",{"_index":870,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{}}}],["constructor(articlemodel",{"_index":107,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["constructor(authservice",{"_index":807,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(fbconfig",{"_index":630,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["constructor(filepath",{"_index":615,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["constructor(googleconfig",{"_index":682,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["constructor(private",{"_index":199,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":846,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(twitterconfig",{"_index":879,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["constructor(usermodel",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{}}}],["consumer",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(articleidmiddleware",{"_index":289,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["consumer_key",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["consumer_secret",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["consumerkey",{"_index":885,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["consumersecret",{"_index":886,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["contendr",{"_index":711,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["content",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IArticle.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":852,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":859,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":861,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":152,"title":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":197,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["controller('auth",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1034,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creada",{"_index":761,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["creamos",{"_index":259,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["create",{"_index":157,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/GoogleStrategy.html":{}}}],["create(@req",{"_index":219,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["create(article",{"_index":302,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["create(req",{"_index":163,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["created",{"_index":705,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["createhmac('sha256",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtoken",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(user",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserandreturntoken",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserandreturntoken(user",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creator",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cual",{"_index":264,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":208,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["currentsimplestring",{"_index":1244,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["data",{"_index":244,"title":{},"body":{"classes/ArticlesGateway.html":{},"injectables/GoogleStrategy.html":{}}}],["database",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["database.providers",{"_index":611,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":66,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":610,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":707,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":742,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["db_connection_token",{"_index":1084,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbconnectiontoken",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":257,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["declarated",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declaration",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declaring",{"_index":702,"title":{},"body":{"interfaces/IArticle.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"classes/AppGateway.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":194,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":1249,"title":{},"body":{"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}}}],["defines",{"_index":1172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["definimos",{"_index":764,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["defining",{"_index":207,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/UsersController.html":{}}}],["delete(':articleid",{"_index":234,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["delete(':articleid')@roles('user",{"_index":168,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["delete(':id",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@roles('admin",{"_index":945,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(article",{"_index":304,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["delete/update/read",{"_index":298,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["deletearticle",{"_index":158,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["deletearticle(@req",{"_index":235,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["deletearticle(req",{"_index":167,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["deleteuser",{"_index":905,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["deleteuser(@req",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(req",{"_index":944,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(user",{"_index":911,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":56,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desarrollo",{"_index":720,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["description",{"_index":201,"title":{},"body":{"controllers/ArticlesController.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["development",{"_index":726,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["displayname",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":704,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{}}}],["documentation",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":655,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["domain",{"_index":747,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":648,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["done(err",{"_index":673,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["done(error",{"_index":834,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["done(ex",{"_index":698,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(new",{"_index":824,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["done(null",{"_index":659,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["dotenv",{"_index":621,"title":{},"body":{"classes/EnvironmentService.html":{},"dependencies.html":{}}}],["dots",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dr6rht4d8neev4lsf11inalma1j86rrf.apps.googleusercontent.com",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dropped",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1206,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1182,"title":{},"body":{"index.html":{}}}],["ejecutar",{"_index":266,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["el",{"_index":263,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/Verifier.html":{},"miscellaneous/variables.html":{}}}],["emails",{"_index":643,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["empty",{"_index":1174,"title":{},"body":{"miscellaneous/functions.html":{}}}],["en",{"_index":33,"title":{},"body":{"classes/AppGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["encuentra",{"_index":756,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entorno",{"_index":739,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["entornos",{"_index":719,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["enum",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env",{"_index":1085,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envconfig",{"_index":614,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["environment",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.variables",{"_index":730,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["environmentservice",{"_index":612,"title":{"classes/EnvironmentService.html":{}},"body":{"classes/EnvironmentService.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environmentservice('.env",{"_index":733,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('aws_key",{"_index":773,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('aws_secret",{"_index":774,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('domain",{"_index":778,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('http_protocol",{"_index":779,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('http_server_port",{"_index":776,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('mongodb_connection",{"_index":775,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('ws_port",{"_index":777,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('ws_protocol",{"_index":780,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["envservice",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envservice.get('node_env",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/functions.html":{}}}],["errormessage",{"_index":1021,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["errormessage.replace(/[\"]/g",{"_index":1023,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["estos",{"_index":713,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["ex",{"_index":326,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":850,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinguser",{"_index":657,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["exists",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exp",{"_index":793,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["expiresin",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["explicación",{"_index":256,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["export",{"_index":32,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}}}],["exportation",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":122,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/AuthController.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":703,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":1163,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extractjwt",{"_index":813,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":821,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractkey",{"_index":731,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractkey(`${rootpath}/keys/jwt.private.key",{"_index":763,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["extractkey(path",{"_index":1162,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facebook",{"_index":635,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["facebook_config_token",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookconfig",{"_index":1070,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookconfigtoken",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebooksignin",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["facebooksignin(@req",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebooksignin(code",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["facebooksignin(req",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookstrategy",{"_index":410,"title":{"injectables/FacebookStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["facebooktokenstrategy",{"_index":633,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1025,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["false",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["fbconfig",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["fbstate",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{}}}],["file.location",{"_index":929,"title":{},"body":{"injectables/UserService.html":{}}}],["fileinterceptor",{"_index":966,"title":{},"body":{"controllers/UsersController.html":{}}}],["filepath",{"_index":617,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["fill",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findall",{"_index":238,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["findall(client",{"_index":243,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["findbyid",{"_index":294,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["finduserbyid",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserbyid(id",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["first",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firstname",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["form",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["forroutes",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('auth/facebook/token",{"_index":442,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/google/token",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/local/signin",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/local/signup",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/twitter/token",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":137,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["framework",{"_index":1180,"title":{},"body":{"index.html":{}}}],["fs",{"_index":623,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["function",{"_index":114,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{}}}],["function(socket",{"_index":45,"title":{},"body":{"classes/AppGateway.html":{}}}],["functions",{"_index":1156,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{}}}],["gateway",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["generatehashedpassword",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatehashedpassword(salt",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatehashedpassword(user.salt",{"_index":832,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["generatesalt",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateusername(profile",{"_index":674,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["generating",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generator",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get('')@roles('admin",{"_index":174,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["get(':articleid",{"_index":225,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["get(':articleid')@roles('user",{"_index":171,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["get(':id",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@roles('user",{"_index":949,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('facebook/uri",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/uri",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('me')@roles('user",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('twitter/uri",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@roles('user",{"_index":952,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(key",{"_index":618,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["get(uri",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["getarticlebyid",{"_index":159,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["getarticlebyid(@req",{"_index":226,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["getarticlebyid(req",{"_index":170,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["geterrormessage",{"_index":320,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["geterrormessage(err",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":1176,"title":{"index.html":{}},"body":{}}],["getuniqueerrormessage",{"_index":1045,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getuniqueerrormessage(err",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getuserbyid",{"_index":906,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getuserbyid(@req",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(req",{"_index":948,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(userid",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":907,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getusers(@req",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(query",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers(req",{"_index":951,"title":{},"body":{"controllers/UsersController.html":{}}}],["gkey5a5piukswtrdnjwqnycdz",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google",{"_index":688,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["google_config_token",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["googleconfig",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["googleconfigtoken",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlesignin",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["googlesignin(@req",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignin(code",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlesignin(req",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlestrategy",{"_index":411,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googletokenstrategy",{"_index":687,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grant_type",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":1238,"title":{},"body":{"modules.html":{}}}],["graph.facebook.com",{"_index":667,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["grow",{"_index":1214,"title":{},"body":{"index.html":{}}}],["guard",{"_index":843,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guardar",{"_index":40,"title":{},"body":{"classes/AppGateway.html":{}}}],["guards",{"_index":190,"title":{},"body":{"controllers/ArticlesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["guards/roles.guard",{"_index":192,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["handler",{"_index":322,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["handler.ts",{"_index":1042,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hashed",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasrole",{"_index":863,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headers",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["heavily",{"_index":1186,"title":{},"body":{"index.html":{}}}],["here",{"_index":1224,"title":{},"body":{"index.html":{}}}],["http",{"_index":771,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200/index",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200/recipes",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":312,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["httpexception(geterrormessage(ex",{"_index":328,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["httpport",{"_index":743,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["httpprotocol",{"_index":748,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["https://accounts.google.com/o/oauth2/auth",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://accounts.google.com/o/oauth2/token",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.twitter.com/oauth/access_token",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.twitter.com/oauth/authenticate",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.twitter.com/oauth/request_token",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.facebook.com/v2.12/oauth/access_token",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1231,"title":{},"body":{"index.html":{}}}],["https://www.facebook.com/v2.12/dialog/oauth",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.googleapis.com/auth/plus.login",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.googleapis.com/auth/plus.profile.emails.read",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":313,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":329,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["iarticle",{"_index":125,"title":{"interfaces/IArticle.html":{}},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"interfaces/IArticle.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["iat",{"_index":794,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["iconfig",{"_index":708,"title":{"interfaces/IConfig.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":131,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["identifier",{"_index":147,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"coverage.html":{}}}],["ienvironmentconfig",{"_index":712,"title":{"interfaces/IEnvironmentConfig.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["if(!types.objectid.isvalid(req.params.articleid",{"_index":143,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["if(!types.objectid.isvalid(req.params.id",{"_index":898,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["if(google",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["if(isallowedroute",{"_index":897,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["ifacebookconfig",{"_index":456,"title":{"interfaces/IFacebookConfig.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"interfaces/IFacebookConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["igoogleconfig",{"_index":460,"title":{"interfaces/IGoogleConfig.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IGoogleConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ijwtpayload",{"_index":790,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["illegalusernames",{"_index":1079,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["im",{"_index":1033,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["implementan",{"_index":716,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["implemente",{"_index":725,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":692,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AppGateway.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":728,"title":{},"body":{"interfaces/IConfig.html":{}}}],["indexed",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}}}],["information",{"_index":203,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["init",{"_index":629,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["inject",{"_index":119,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["inject(facebook_config_token",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["inject(google_config_token",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["inject(twitter_config_token",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["inject(user_model_token",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["injectable",{"_index":101,"title":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"injectables/sharedVariables.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"overview.html":{},"injectables/sharedVariables.html":{}}}],["inspired",{"_index":1187,"title":{},"body":{"index.html":{}}}],["install",{"_index":1195,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1192,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":699,"title":{"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{}},"body":{"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":700,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["interfaces/article.interface",{"_index":315,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["interfaces/facebook",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["interfaces/google",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["interfaces/jwt",{"_index":816,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/token.interface",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["interfaces/twitter",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["interfaces/user.interface",{"_index":926,"title":{},"body":{"injectables/UserService.html":{}}}],["interfaz",{"_index":717,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["invalid",{"_index":900,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"miscellaneous/variables.html":{}}}],["isallowedroute",{"_index":895,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["isemptyobject",{"_index":316,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isemptyobject(value",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["itoken",{"_index":387,"title":{"interfaces/IToken.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IToken.html":{},"coverage.html":{}}}],["itwitterconfig",{"_index":458,"title":{"interfaces/ITwitterConfig.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ITwitterConfig.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iuser",{"_index":464,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"coverage.html":{}}}],["joi",{"_index":1016,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{}}}],["join",{"_index":1220,"title":{},"body":{"index.html":{}}}],["jos975affhqgslcr6",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(body",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["jsonwebtoken",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["jwt",{"_index":815,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":820,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtsecret",{"_index":746,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtstrategy",{"_index":412,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1228,"title":{},"body":{"index.html":{}}}],["keepalive",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/functions.html":{}}}],["keys",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keys/jwt.private.key",{"_index":762,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["la",{"_index":710,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["las",{"_index":736,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["last",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letters",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1233,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1211,"title":{},"body":{"index.html":{}}}],["linea",{"_index":39,"title":{},"body":{"classes/AppGateway.html":{}}}],["list",{"_index":160,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{}}}],["list(@req",{"_index":214,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["list(req",{"_index":173,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["literal",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"classes/EnvironmentService.html":{}}}],["llamado",{"_index":262,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["llave",{"_index":760,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["loader",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["local.hashedpassword",{"_index":876,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["local.salt",{"_index":875,"title":{},"body":{"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["localhost",{"_index":770,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":413,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":839,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":93,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["login_dialog_uri",{"_index":784,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["logmessage",{"_index":838,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["long",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["los",{"_index":41,"title":{},"body":{"classes/AppGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["lowercase",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":30,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["match",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["match.shift",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":51,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["me(@req",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["me(req",{"_index":954,"title":{},"body":{"controllers/UsersController.html":{}}}],["me(usermodel",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["meanjs",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":254,"title":{},"body":{"classes/ArticlesGateway.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{}}}],["messages",{"_index":127,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/LocalStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":287,"title":{},"body":{"modules/ArticlesModule.html":{},"injectables/TwitterStrategy.html":{},"modules/UsersModule.html":{}}}],["methods",{"_index":12,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}}}],["middleware",{"_index":132,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["middlewareconsumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["middlewares",{"_index":281,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["middlewares/articlebyid.middleware",{"_index":280,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["middlewares/body",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/userbyid.middleware",{"_index":1004,"title":{},"body":{"modules/UsersModule.html":{}}}],["miscellaneous",{"_index":1155,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1210,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1200,"title":{},"body":{"index.html":{}}}],["model",{"_index":108,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":53,"title":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":55,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/articles/articles.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/client/img/profile/default.png",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules/users/interfaces/user.interface",{"_index":854,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["modules/users/users.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["mongo",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongodb",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb://localhost:27017/store",{"_index":767,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":124,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1223,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["multerconfig",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1229,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nest/microservices",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["nestframework",{"_index":1232,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{},"injectables/sharedVariables.html":{}}}],["nestjs/core",{"_index":853,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":967,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":27,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":118,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["nestmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["new",{"_index":217,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.save",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":113,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["next(new",{"_index":145,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["node.js",{"_index":1179,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":1194,"title":{},"body":{"index.html":{}}}],["nuestro",{"_index":738,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["null",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":744,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IJwtPayload.html":{}}}],["number.max_value",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oauth",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["oauth2",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["oauth_redirect_uri",{"_index":785,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["oauth_token",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth_token_secret",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth_verifier",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":804,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["objectschema",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objetos",{"_index":714,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["observable",{"_index":28,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"injectables/sharedVariables.html":{}}}],["obtendr",{"_index":734,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["one",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ongatewayinit",{"_index":8,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["open",{"_index":1212,"title":{},"body":{"index.html":{}}}],["optional",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{}}}],["opts",{"_index":1056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1240,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1095,"title":{"dependencies.html":{}},"body":{}}],["para",{"_index":753,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":186,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":1173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{}}}],["params",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parse",{"_index":620,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["parse(readfilesync(filepath",{"_index":626,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["parsedresponse",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsedresponse[match.shift",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsedtoken",{"_index":871,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["parseimageurl",{"_index":318,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parseimageurl(file.path",{"_index":930,"title":{},"body":{"injectables/UserService.html":{}}}],["parser",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["parsetwitterresponse",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsetwitterresponse(response",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"dependencies.html":{}}}],["passport/facebook.strategy",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/google",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/jwt.strategy",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/local.strategy",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/twitter.strategy",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/verifier",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":812,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":818,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":830,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["patch",{"_index":184,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{}}}],["patch(':articleid",{"_index":231,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patch(':articleid')@roles('user",{"_index":177,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patch(article",{"_index":307,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["patcharticlebyid",{"_index":161,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patcharticlebyid(@req",{"_index":232,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patcharticlebyid(req",{"_index":176,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["path",{"_index":286,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["payload",{"_index":811,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":817,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":792,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["photos",{"_index":644,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["picture?type=large",{"_index":668,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["pkihc4",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1221,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":689,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["plus.strategy",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{}}}],["plus.strategy.ts",{"_index":681,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plus.strategy.ts:13",{"_index":683,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["plus.strategy.ts:21",{"_index":684,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["poolsize",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":182,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["post('')@roles('user",{"_index":164,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["post('facebook/signin",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('facebook/token",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('google/signin",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('google/token",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('local/signin",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('local/signup",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('twitter/signin",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('twitter/token",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":155,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["previously",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":141,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/sharedVariables.html":{}}}],["proceso",{"_index":258,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["process.cwd",{"_index":757,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["produccion",{"_index":722,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":727,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":647,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["profile._json",{"_index":650,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.displayname",{"_index":663,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.emails",{"_index":675,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.emails.shift().value",{"_index":653,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.emails[0].value",{"_index":694,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["profile.emails[0].value.split('@')[0",{"_index":676,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.id",{"_index":665,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["profile.id}@${profile.provider}.com",{"_index":656,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.name",{"_index":677,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.name.familyname",{"_index":662,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.name.givenname",{"_index":661,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.name.givenname[0",{"_index":678,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.username",{"_index":664,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profilefields",{"_index":642,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profileimageurl",{"_index":666,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1178,"title":{},"body":{"index.html":{}}}],["project",{"_index":1213,"title":{},"body":{"index.html":{}}}],["promise",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":624,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["properties",{"_index":10,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/sharedVariables.html":{}}}],["propiedades",{"_index":737,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["provide",{"_index":230,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":134,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["providerdata",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["providerdata.accesstoken",{"_index":651,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["providerdata.image.url",{"_index":696,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["providerdata.picture",{"_index":695,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["providerdata.refreshtoken",{"_index":652,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["provideridentifierfield",{"_index":670,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provideruserprofile",{"_index":660,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["provideruserprofile.username",{"_index":697,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["public",{"_index":274,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":183,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["put(':articleid",{"_index":227,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["put(':articleid')@roles('user",{"_index":180,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["put(':id",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id')@roles('user",{"_index":958,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('upload",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('upload')@roles('user",{"_index":961,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":918,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["queryparams",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(128).tostring('base64",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1222,"title":{},"body":{"index.html":{}}}],["readfilesync",{"_index":622,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["readonly",{"_index":142,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{}}}],["reconnectinterval",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reconnecttries",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect_uri",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirect_uri=${this.fbconfig.oauth_redirect_uri",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirect_uri=${this.googleconfig.oauth_redirect_uri",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["ref",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":847,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":646,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["regex",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["regex.exec(response",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["regexp",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["regexpmatcharray",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(body.error",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(err",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(error",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":1191,"title":{},"body":{"index.html":{}}}],["req",{"_index":116,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["req.article",{"_index":139,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["req.baseurl",{"_index":841,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.body",{"_index":220,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["req.body.email",{"_index":1010,"title":{},"body":{"injectables/Verifier.html":{}}}],["req.body.oauth_verifier",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.headers.authorization",{"_index":872,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.model",{"_index":902,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.query",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":862,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.user._id",{"_index":222,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["request",{"_index":120,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["request_token_uri",{"_index":798,"title":{},"body":{"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["requestfacebookredirecturi",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestfacebookredirecturl",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestgoogleredirecturi",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["requestjsonwebtokenafterfacebooksignin",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterfacebooksignin(@req",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterfacebooksignin(req",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftergooglesignin",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftergooglesignin(@req",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftergooglesignin(req",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignin",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignin(@req",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignin(req",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignup",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignup(@req",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignup(req",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftertwittersignin",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftertwittersignin(@req",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftertwittersignin(req",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestmethod",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":291,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["requestmethod.post",{"_index":288,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["requesttwitterredirecturi",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["require('passport",{"_index":634,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":112,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["res.status(500).send(ex",{"_index":877,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["reset",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordexpires",{"_index":801,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordtoken",{"_index":802,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["resolve",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(body",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":121,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/AuthService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["response_type",{"_index":788,"title":{},"body":{"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["response_type=${this.googleconfig.response_type",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["respuesta",{"_index":268,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["rest",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restarted",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restricted",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result",{"_index":50,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":1020,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["result.error.details.shift().message",{"_index":1022,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["results",{"_index":52,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":144,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":136,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{}}}],["rimraf",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":204,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["role.includes(role",{"_index":865,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":193,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IUser.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":213,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["roles('user",{"_index":218,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["rolesguard",{"_index":191,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rootpath",{"_index":741,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":210,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["routes",{"_index":205,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":296,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["running",{"_index":1196,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":755,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":29,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"dependencies.html":{},"injectables/sharedVariables.html":{}}}],["rxjs/operators",{"_index":31,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["s3",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["saber",{"_index":754,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["salt",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["salt).update(password).digest('hex",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scaffold",{"_index":1234,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1183,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.types.objectid",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope=${this.googleconfig.scopes.join",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["scopes",{"_index":789,"title":{},"body":{"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["se",{"_index":724,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":822,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1164,"title":{},"body":{"miscellaneous/functions.html":{}}}],["según",{"_index":723,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["sendarticleslistfromsocket",{"_index":239,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendarticleslistfromsocket(articles",{"_index":248,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendcreatedarticle",{"_index":240,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendcreatedarticle(article",{"_index":250,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["ser",{"_index":265,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["server",{"_index":11,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["server.constants",{"_index":129,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["server_config",{"_index":314,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_config.db",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server_config.httpprotocol}://${server_config.domain}:${server_config.httpport",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["server_config.jwtsecret",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenMiddleware.html":{}}}],["server_config_token",{"_index":1087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serverconfigtoken",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servidor",{"_index":37,"title":{},"body":{"classes/AppGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":691,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["seteamos",{"_index":752,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sharedvariables",{"_index":1090,"title":{"injectables/sharedVariables.html":{}},"body":{"coverage.html":{},"injectables/sharedVariables.html":{}}}],["side",{"_index":1184,"title":{},"body":{"index.html":{}}}],["sign",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["simplestring",{"_index":1245,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["socket",{"_index":261,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["socket.io",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["sockets",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["sockettimeoutms",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"index.html":{},"injectables/sharedVariables.html":{}}}],["sparse",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1216,"title":{},"body":{"index.html":{}}}],["src/.../article.joi.ts",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../article.schema.ts",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../articles.providers.ts",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.providers.ts",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.ts",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../converters.ts",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../encryption.ts",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1159,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../facebook",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../facebook.strategy.ts",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../google",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.ts",{"_index":1158,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1157,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer.ts",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.constants.ts",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../twitter",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../twitter.strategy.ts",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1161,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.providers.ts",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":1160,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.gateway.ts",{"_index":6,"title":{},"body":{"classes/AppGateway.html":{},"coverage.html":{}}}],["src/app.gateway.ts:14",{"_index":16,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:19",{"_index":20,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.module.ts",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:32",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/helpers/converters.ts",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/error",{"_index":1041,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/helpers/utils.ts",{"_index":1046,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/middlewares/logger.middleware.ts",{"_index":835,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/logger.middleware.ts:6",{"_index":836,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/middlewares/token.middleware.ts",{"_index":867,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/token.middleware.ts:12",{"_index":868,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/common/middlewares/token.middleware.ts:14",{"_index":869,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/config/config.ts",{"_index":709,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.ts:27",{"_index":729,"title":{},"body":{"interfaces/IConfig.html":{}}}],["src/config/multer.ts",{"_index":1053,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":609,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":1055,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":1057,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environment.variables.ts",{"_index":613,"title":{},"body":{"classes/EnvironmentService.html":{},"coverage.html":{}}}],["src/environment.variables.ts:11",{"_index":619,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["src/environment.variables.ts:5",{"_index":616,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["src/guards/roles.guard.ts",{"_index":844,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/guards/roles.guard.ts:11",{"_index":848,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/guards/roles.guard.ts:16",{"_index":851,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":1058,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/articles/articles.controller.ts",{"_index":154,"title":{},"body":{"controllers/ArticlesController.html":{},"coverage.html":{}}}],["src/modules/articles/articles.controller.ts:106",{"_index":178,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:119",{"_index":169,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:52",{"_index":175,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:66",{"_index":166,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:80",{"_index":172,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:93",{"_index":181,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.gateway.ts",{"_index":237,"title":{},"body":{"classes/ArticlesGateway.html":{},"coverage.html":{}}}],["src/modules/articles/articles.gateway.ts:14",{"_index":241,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:20",{"_index":242,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:23",{"_index":249,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:27",{"_index":251,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:36",{"_index":246,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.module.ts",{"_index":273,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["src/modules/articles/articles.module.ts:27",{"_index":275,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["src/modules/articles/articles.providers.ts",{"_index":1060,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/articles/articles.service.ts",{"_index":299,"title":{},"body":{"injectables/ArticlesService.html":{},"coverage.html":{}}}],["src/modules/articles/articles.service.ts:12",{"_index":301,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:15",{"_index":303,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:23",{"_index":306,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:31",{"_index":311,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:41",{"_index":309,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:49",{"_index":305,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/interfaces/article.interface.ts",{"_index":701,"title":{},"body":{"interfaces/IArticle.html":{},"coverage.html":{}}}],["src/modules/articles/joi/article.joi.ts",{"_index":1063,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/articles/middlewares/article",{"_index":1012,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"coverage.html":{}}}],["src/modules/articles/middlewares/articlebyid.middleware.ts",{"_index":104,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"coverage.html":{}}}],["src/modules/articles/middlewares/articlebyid.middleware.ts:16",{"_index":109,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["src/modules/articles/middlewares/articlebyid.middleware.ts:18",{"_index":115,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["src/modules/articles/schemas/article.schema.ts",{"_index":1064,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:15",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:20",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:25",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:30",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:35",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:40",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:50",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:55",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:60",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:65",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.module.ts:37",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.providers.ts",{"_index":1066,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:140",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:168",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:214",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:228",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:276",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:68",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:79",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:83",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:96",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/config/facebook",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/config/google",{"_index":1071,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/config/twitter",{"_index":1072,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/facebook",{"_index":781,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/google",{"_index":787,"title":{},"body":{"interfaces/IGoogleConfig.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/jwt",{"_index":791,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/token.interface.ts",{"_index":796,"title":{},"body":{"interfaces/IToken.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/twitter",{"_index":797,"title":{},"body":{"interfaces/ITwitterConfig.html":{},"coverage.html":{}}}],["src/modules/auth/middlewares/body",{"_index":1026,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["src/modules/auth/passport/facebook.strategy.ts",{"_index":628,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/passport/facebook.strategy.ts:12",{"_index":631,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/passport/facebook.strategy.ts:20",{"_index":632,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/passport/google",{"_index":680,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/passport/jwt.strategy.ts",{"_index":805,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/passport/jwt.strategy.ts:11",{"_index":808,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/passport/jwt.strategy.ts:19",{"_index":810,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/passport/local.strategy.ts",{"_index":825,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/passport/local.strategy.ts:11",{"_index":826,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/passport/local.strategy.ts:18",{"_index":827,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/passport/twitter.strategy.ts",{"_index":878,"title":{},"body":{"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/passport/twitter.strategy.ts:12",{"_index":880,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["src/modules/auth/passport/twitter.strategy.ts:20",{"_index":881,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["src/modules/auth/passport/verifier.ts",{"_index":1007,"title":{},"body":{"injectables/Verifier.html":{},"coverage.html":{}}}],["src/modules/auth/passport/verifier.ts:10",{"_index":1009,"title":{},"body":{"injectables/Verifier.html":{}}}],["src/modules/auth/passport/verifier.ts:8",{"_index":1008,"title":{},"body":{"injectables/Verifier.html":{}}}],["src/modules/users/interfaces/user.interface.ts",{"_index":799,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/modules/users/joi/auth",{"_index":1075,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/middlewares/userbyid.middleware.ts",{"_index":889,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"coverage.html":{}}}],["src/modules/users/middlewares/userbyid.middleware.ts:13",{"_index":890,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["src/modules/users/middlewares/userbyid.middleware.ts:15",{"_index":891,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["src/modules/users/schemas/user.schema.ts",{"_index":1077,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/users.controller.ts",{"_index":941,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:104",{"_index":953,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:117",{"_index":947,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:53",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:66",{"_index":963,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:79",{"_index":950,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:92",{"_index":959,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":999,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.module.ts:23",{"_index":1000,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.providers.ts",{"_index":1081,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/users.service.ts",{"_index":904,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:10",{"_index":910,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:13",{"_index":921,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:17",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:21",{"_index":923,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:26",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:30",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:34",{"_index":925,"title":{},"body":{"injectables/UserService.html":{}}}],["src/server.constants.ts",{"_index":1083,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared",{"_index":1088,"title":{},"body":{"coverage.html":{},"injectables/sharedVariables.html":{}}}],["src/utilities/encryption.ts",{"_index":1091,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utilities/keys.ts",{"_index":1092,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sta",{"_index":38,"title":{},"body":{"classes/AppGateway.html":{}}}],["start",{"_index":1198,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1201,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1202,"title":{},"body":{"index.html":{}}}],["started",{"_index":1177,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1190,"title":{},"body":{"index.html":{}}}],["state",{"_index":786,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"miscellaneous/variables.html":{}}}],["state=${this.fbconfig.state",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["statements",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1225,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1054,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategies",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":814,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["string().alphanum().min(6).max(36).required",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string().email().required",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string().required",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stuff",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["sub",{"_index":795,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["subscribemessage",{"_index":24,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["subscribemessage('articles",{"_index":245,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["super",{"_index":819,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["superadmin",{"_index":946,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":1209,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1236,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":1203,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1208,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1207,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1205,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1215,"title":{},"body":{"index.html":{}}}],["this.articlemodel.create(article",{"_index":324,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["this.articlemodel.find",{"_index":330,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["this.articlemodel.findbyid(req.params.articleid",{"_index":150,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["this.articlesservice.create(article",{"_index":223,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.delete(article",{"_index":236,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.list",{"_index":215,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.patch(article",{"_index":233,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.update(article",{"_index":229,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlessocket.sendarticleslistfromsocket(articles",{"_index":216,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.authservice.createtoken(req.user",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuserandreturntoken(req.body",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.facebooksignin(req.body.code",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.finduserbyid(payload.sub",{"_index":823,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.googlesignin(req.body.code",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestfacebookredirecturi",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestgoogleredirecturi",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requesttwitterredirecturi",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.twittersignin(req.body.oauth_token",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.envconfig",{"_index":625,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["this.envconfig[key",{"_index":627,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["this.fbconfig.access_token_uri}?${queryparams.join",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.fbconfig.client_id",{"_index":639,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["this.fbconfig.client_secret",{"_index":641,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["this.fbconfig.login_dialog_uri}?${queryparams.join",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.access_token_uri",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.client_id",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["this.googleconfig.client_secret",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["this.googleconfig.grant_type",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.login_dialog_uri}?${queryparams.join",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.oauth_redirect_uri",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.init",{"_index":636,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["this.parsetwitterresponse(body",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.get('roles",{"_index":858,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.authenticatedusers",{"_index":43,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.server.authenticatedusers.push",{"_index":46,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.server.emit('articlechannel",{"_index":255,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["this.server.emit('articles",{"_index":253,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["this.server.sockets.on('connection",{"_index":44,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.simplestring.asobservable",{"_index":1250,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["this.simplestring.next(string",{"_index":1257,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["this.twitterconfig.access_token_uri",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.twitterconfig.consumer_key",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["this.twitterconfig.consumer_secret",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["this.twitterconfig.login_dialog_uri}?oauth_token=${oauth_token",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.twitterconfig.oauth_redirect_uri",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.twitterconfig.request_token_uri",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url}/api/auth/facebook/token",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url}/api/auth/google/token",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url}/api/auth/twitter/token",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["this.usermodel(provideruserprofile",{"_index":671,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["this.usermodel.find(query).select",{"_index":927,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findbyid(parsedtoken['_id']).select",{"_index":874,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["this.usermodel.findbyid(req.params.id).select",{"_index":901,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["this.usermodel.findbyid(userid).select",{"_index":931,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":658,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/Verifier.html":{}}}],["this.userservice.deleteuser(user",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getusers(query",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.me(req.user",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateprofileimage(user",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateuser(req.model",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":327,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["time",{"_index":47,"title":{},"body":{"classes/AppGateway.html":{}}}],["tipados",{"_index":715,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["title",{"_index":706,"title":{},"body":{"interfaces/IArticle.html":{},"miscellaneous/variables.html":{}}}],["todas",{"_index":735,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["token",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IToken.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["tokenmiddleware",{"_index":95,"title":{"injectables/TokenMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["tokens",{"_index":693,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["touch",{"_index":1226,"title":{},"body":{"index.html":{}}}],["trabajo",{"_index":740,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["transformer",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":860,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":323,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["twitter",{"_index":883,"title":{},"body":{"injectables/TwitterStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["twitter.id",{"_index":887,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["twitter_config_token",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["twitterconfig",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["twitterconfigtoken",{"_index":1291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twittersignin",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["twittersignin(@req",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["twittersignin(oauth_token",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["twittersignin(req",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["twitterstrategy",{"_index":414,"title":{"injectables/TwitterStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["twittertokenstrategy",{"_index":882,"title":{},"body":{"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":123,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["types/cookie",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["types/helmet",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["types/joi",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["types/mongoose",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["types/request",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["types/ws",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1189,"title":{},"body":{"index.html":{}}}],["un",{"_index":260,"title":{},"body":{"classes/ArticlesGateway.html":{},"miscellaneous/functions.html":{}}}],["una",{"_index":267,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["unauthorized_email_or_username_in_use",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_invalid_email",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_invalid_password",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_unrecognized_bearer",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":117,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{}}}],["unauthorizedexception('invalid",{"_index":146,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["unauthorizedexception('no",{"_index":151,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{}}}],["unauthorizedexception('user",{"_index":899,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["unauthorizedexception(messages.unauthorized_email_or_username_in_use",{"_index":1011,"title":{},"body":{"injectables/Verifier.html":{}}}],["unauthorizedexception(messages.unauthorized_invalid_email",{"_index":831,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(messages.unauthorized_invalid_password",{"_index":833,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":669,"title":{},"body":{"injectables/FacebookStrategy.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1204,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unrecognized",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":300,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["update(article",{"_index":310,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["updatearticlebyid",{"_index":162,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["updatearticlebyid(@req",{"_index":228,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["updatearticlebyid(req",{"_index":179,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["updated",{"_index":803,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["updateprofileimage",{"_index":908,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileimage(user",{"_index":922,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser",{"_index":909,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(user",{"_index":924,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserbyid",{"_index":942,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyid(@req",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyid(req",{"_index":957,"title":{},"body":{"controllers/UsersController.html":{}}}],["updating",{"_index":939,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":894,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["uploadedfile",{"_index":964,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfile",{"_index":943,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfile(@uploadedfile",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfile(file",{"_index":960,"title":{},"body":{"controllers/UsersController.html":{}}}],["uri",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["url",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["use",{"_index":106,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["use('facebook",{"_index":637,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["use('google",{"_index":690,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["use('local",{"_index":828,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["use('twitter",{"_index":884,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["use(req",{"_index":111,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["usecreateindex",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":1292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":187,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":198,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":965,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["usenewurlparser",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":212,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.facebook.id",{"_index":936,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.google.id",{"_index":933,"title":{},"body":{"injectables/UserService.html":{}}}],["user.id",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.joi",{"_index":1030,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["user.joi.ts",{"_index":1076,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.lastname",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.local.email",{"_index":934,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.profileimageurl",{"_index":928,"title":{},"body":{"injectables/UserService.html":{}}}],["user.remove",{"_index":932,"title":{},"body":{"injectables/UserService.html":{}}}],["user.roles",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":672,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserService.html":{}}}],["user.twitter.id",{"_index":935,"title":{},"body":{"injectables/UserService.html":{}}}],["user.username",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["user['roles",{"_index":866,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user['roles'].some((role",{"_index":864,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_id",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_model_token",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["useridmiddleware",{"_index":888,"title":{"injectables/UserIdMiddleware.html":{}},"body":{"injectables/UserIdMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usermodel",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{}}}],["username",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["username.tolowercase",{"_index":679,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["usernamefield",{"_index":829,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userproviders",{"_index":1002,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":292,"title":{},"body":{"modules/ArticlesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.controller",{"_index":1001,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.providers",{"_index":1003,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/:id",{"_index":1006,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/interfaces/user.interface",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{}}}],["users/joi/auth",{"_index":1029,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["users/users.module",{"_index":426,"title":{},"body":{"modules/AuthModule.html":{}}}],["userschema",{"_index":1080,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":940,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":903,"title":{"injectables/UserService.html":{}},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":67,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usevalue",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usuarios",{"_index":42,"title":{},"body":{"classes/AppGateway.html":{}}}],["utilities/encryption",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["utilities/keys",{"_index":732,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["uuid",{"_index":686,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["v1",{"_index":685,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["valid",{"_index":135,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":806,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validate(payload",{"_index":809,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req.body",{"_index":1019,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["validateusername",{"_index":1078,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validateusername(username",{"_index":1175,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validating",{"_index":133,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["validator",{"_index":1031,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{}}}],["validator.middleware",{"_index":284,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{}}}],["validator.middleware.ts",{"_index":1013,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["validator.middleware.ts:19",{"_index":1014,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["validator.middleware.ts:22",{"_index":1015,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{}}}],["validator.middleware.ts:23",{"_index":1027,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["valores",{"_index":765,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":209,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":649,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["variable",{"_index":138,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1256,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/sharedVariables.html":{},"miscellaneous/variables.html":{}}}],["variables.ts",{"_index":1089,"title":{},"body":{"coverage.html":{},"injectables/sharedVariables.html":{}}}],["variables.ts:11",{"_index":1251,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["variables.ts:13",{"_index":1248,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["variables.ts:9",{"_index":1254,"title":{},"body":{"injectables/sharedVariables.html":{}}}],["verifier",{"_index":432,"title":{"injectables/Verifier.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/Verifier.html":{},"coverage.html":{}}}],["verifies",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["verify",{"_index":855,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["verify(token",{"_index":873,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["void",{"_index":22,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TwitterStrategy.html":{},"modules/UsersModule.html":{},"injectables/sharedVariables.html":{}}}],["watch",{"_index":1199,"title":{},"body":{"index.html":{}}}],["website",{"_index":1230,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":25,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["websocketserver",{"_index":19,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["word",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["work",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":206,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["works",{"_index":269,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["ws",{"_index":772,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["wsport",{"_index":745,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["wsprotocol",{"_index":749,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["wsresponse",{"_index":26,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["www",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["xcrso4bxergva9tifcak1onlcdm53cbu75rmevvbdz3jnb7dqn",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["y",{"_index":721,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["you'd",{"_index":1219,"title":{},"body":{"index.html":{}}}],["z",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["z_]+?)=([a",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["za",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["zoom",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AppGateway.html":{"url":"classes/AppGateway.html","title":"class - AppGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.gateway.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app.gateway.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsResponse,\n  OnGatewayInit\n} from '@nestjs/websockets';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@WebSocketGateway()\n\nexport class AppGateway implements OnGatewayInit {\n  @WebSocketServer() server;\n\n  constructor() {\n  }\n\n  afterInit() {\n    //  En cada conexión al servidor, ésta linea guardará a los usuarios\n    this.server.authenticatedUsers = [];\n    this.server.sockets.on('connection', function(socket) {\n      this.server.authenticatedUsers.push({ time: 1 });\n      console.log(this.server.authenticatedUsers);\n    }); \n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nArticlesModule\n\nArticlesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticlesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ArticlesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        // Nest\nimport { Module, NestModule, RequestMethod, MiddlewareConsumer } from '@nestjs/common';\n\n// Modules\nimport { AuthModule } from './modules/auth/auth.module';\nimport { UsersModule } from './modules/users/users.module';\nimport { ArticlesModule } from './modules/articles/articles.module';\n\n//  Database import\nimport { DatabaseModule } from './database';\n\n//  Gateway sockets\nimport { AppGateway } from './app.gateway';\nimport { LoggerMiddleware } from './common/middlewares/logger.middleware';\nimport { TokenMiddleware } from './common/middlewares/token.middleware';\n\n@Module({\n\timports: [\n\t\tDatabaseModule,\n\t\tAuthModule,\n\t\tUsersModule,\n\t\tArticlesModule\n\t],\n\tcontrollers: [\n\t],\n\tproviders: [\n\t\tAppGateway\n\t]\n})\n\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n  \tconsole.log('conchasumare');\n    consumer\n      .apply(LoggerMiddleware, TokenMiddleware)\n      .forRoutes('*');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleIdMiddleware.html":{"url":"injectables/ArticleIdMiddleware.html","title":"injectable - ArticleIdMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ArticleIdMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/middlewares/articleById.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/middlewares/articleById.middleware.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/middlewares/articleById.middleware.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  UnauthorizedException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Model, Types } from 'mongoose';\nimport { IArticle } from '../../articles/interfaces/article.interface';\nimport { MESSAGES, ARTICLE_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\n/**\n *  Article By Id Middleware\n *  We validating if the Id provided is valid, and returning the found article in the variable req.article\n */\nexport class ArticleIdMiddleware implements NestMiddleware {\n  constructor(@Inject(ARTICLE_MODEL_TOKEN) private readonly articleModel: Model) {}\n  async use(req, res, next: Function) {\n      if(!Types.ObjectId.isValid(req.params.articleId)) return next(new UnauthorizedException('Invalid identifier'));\n      const article = await this.articleModel.findById(req.params.articleId);\n      if (article) {\n        req.article = article;\n        next();\n      }\n      else return next(new UnauthorizedException('No article with that identifier has been found'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticlesController.html":{"url":"controllers/ArticlesController.html","title":"controller - ArticlesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticlesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/articles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                getArticleById\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                patchArticleById\n                            \n                            \n                                    Async\n                                updateArticleById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteArticle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getArticleById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticleById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            list\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    list(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@Roles('admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patchArticleById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patchArticleById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateArticleById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticleById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller,\n  Post, \n  Get,\n  Put,\n  Patch,\n  Delete,\n  Param,\n  UseGuards,\n  Req } from '@nestjs/common';\n\nimport { ArticlesService } from './articles.service';\n\n// Guards\nimport { RolesGuard } from '../../guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\n\nimport { ArticlesGateway } from '../articles/articles.gateway';\n\n@Controller('articles')\n@UseGuards(RolesGuard)\nexport class ArticlesController {\n  constructor(private readonly articlesService: ArticlesService, \n              private readonly articlesSocket: ArticlesGateway) {\n  }\n  /* --------------------------------------------------------------------\n\n    Module     : Articles\n    Controller : Article Controller\n\n    ---------------------------------------------------------------------\n\n    Description :\n    \n    Aditional information: All role routes are working with Guards, and Guards \n    are defining the current req.article value.\n\n    Middleware description: \n\n    Route:\n    /api/articles    \n   ----------------------------------------------------------------------*/\n\n  /* \n    Route:        GET api/articles\n    Roles:        user, admin\n    Description:  Get list of articles\n  */\n\n  @Get('')\n  @Roles('admin')\n  async list(@Req() req) {\n    const articles = await this.articlesService.list();\n    this.articlesSocket.sendArticlesListFromSocket(articles);\n  \treturn articles;\n  }\n\n  /* \n    Route:        Post api/articles\n    Roles:        user, admin\n    Description:  Create a new Article\n  */\n\n  @Post('')\n  @Roles('user', 'admin')\n  async create(@Req() req) {\n    let article = req.body;\n    article.creator = req.user._id;\n    return await this.articlesService.create(article);\n  }\n\n  /* \n    Route:        GET api/articles/:articleId\n    Roles:        article, admin\n    Description:  Get article by provided Id.\n  */\n\n  @Get(':articleId')\n  @Roles('user', 'admin')\n  async getArticleById(@Req() req) {\n    let article = req.article;\n    return article;\n  }\n\n  /* \n    Route:        PUT api/articles/:articleId \n    Roles:        article, admin\n    Description:  Get article by provided Id.\n  */\n\n  @Put(':articleId')\n  @Roles('user', 'admin')\n  async updateArticleById(@Req() req) {\n    const article = req.article;\n    return await this.articlesService.update(article, req.body);\n  }\n\n  /* \n    Route:        DELETE api/articles/:articleId\n    Roles:        user, admin\n    Description:  Delete article provide by id.\n  */\n\n  @Patch(':articleId')\n  @Roles('user', 'admin')\n  async patchArticleById(@Req() req) {\n    const article = req.article;\n    return await this.articlesService.patch(article, req.body);\n  }\n\n  /* \n    Route:        DELETE api/articles/:articleId\n    Roles:        user, admin\n    Description:  Delete article provide by id.\n  */\n\n  @Delete(':articleId')\n  @Roles('user', 'admin')\n  async deleteArticle(@Req() req) {\n    const article = req.article;\n    return await this.articlesService.delete(article);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesGateway.html":{"url":"classes/ArticlesGateway.html","title":"class - ArticlesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/articles.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                findAll\n                            \n                            \n                                sendArticlesListFromSocket\n                            \n                            \n                                sendCreatedArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/articles.gateway.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/articles/articles.gateway.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll(client, data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('articles')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendArticlesListFromSocket\n                        \n                        \n                    \n                \n            \n            \n                \nsendArticlesListFromSocket(articles)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    articles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendCreatedArticle\n                        \n                        \n                    \n                \n            \n            \n                \nsendCreatedArticle(article)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsResponse,\n  OnGatewayInit\n} from '@nestjs/websockets';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@WebSocketGateway()\n\nexport class ArticlesGateway implements OnGatewayInit {\n  @WebSocketServer() server;\n\n  constructor() {\n    console.log('initializing');\n  }\n\n  afterInit() {\n  }\n\n  sendArticlesListFromSocket(articles) {\n    return this.server.emit('articles', { message: 'from controller' });\n  }\n\n  sendCreatedArticle(article) {\n    return this.server.emit('articleChannel', { article });\n  }\n\n  /*\n   *  Explicación de proceso\n   *  1.- Creamos un socket llamado articles, el cual al ser llamado ejecutará una respuesta\n   */\n  @SubscribeMessage('articles')\n  findAll(client, data) {\n    return this.server.emit('articles', { message: 'works' });\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticlesModule.html":{"url":"modules/ArticlesModule.html","title":"module - ArticlesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticlesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArticlesModule\n\n\n\ncluster_ArticlesModule_imports\n\n\n\ncluster_ArticlesModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nArticlesModule\n\nArticlesModule\n\nArticlesModule -->\n\nDatabaseModule->ArticlesModule\n\n\n\n\n\nArticlesService\n\nArticlesService\n\nArticlesModule -->\n\nArticlesService->ArticlesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/articles/articles.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticlesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticlesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer, RequestMethod } from '@nestjs/common';\n\nimport { DatabaseModule } from '../../database';\nimport { ArticlesController } from './articles.controller';\nimport { articleProviders } from './articles.providers';\nimport { ArticlesService } from './articles.service';\n\nimport { ArticlesGateway } from './articles.gateway';\n\nimport { ArticleIdMiddleware } from './middlewares/articleById.middleware';\n//  Middlewares\nimport { articleValidatorMiddleware } from '../articles/middlewares/article-validator.middleware';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [ArticlesController],\n  providers: [\n    ArticlesGateway,\n    ...articleProviders,\n    ArticlesService\n  ],\n  exports: [\n    ...articleProviders\n  ]\n})\nexport class ArticlesModule implements NestModule{\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(articleValidatorMiddleware)\n      .forRoutes({ path: 'articles', method: RequestMethod.POST });\n\n    consumer.apply(ArticleIdMiddleware)\n      .forRoutes({ path: 'articles/:articleId', method: RequestMethod.ALL });\n      //  users id calling middleware for findById users before run another methods like \"delete/update/read\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticlesService.html":{"url":"injectables/ArticlesService.html","title":"injectable - ArticlesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ArticlesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/articles.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                patch\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/articles.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(article)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(article)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            list\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    list()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(article, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(article, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport { Model } from 'mongoose';\n\nimport { ARTICLE_MODEL_TOKEN, SERVER_CONFIG } from '../../server.constants';\nimport { IArticle } from './interfaces/article.interface';\nimport { isEmptyObject } from '../../common/helpers/utils';\n\nimport { parseImageURL } from '../../common/helpers/converters';\nimport { getErrorMessage } from '../../common/helpers/error-handler';\n\n@Injectable()\nexport class ArticlesService {\n  constructor(@Inject(ARTICLE_MODEL_TOKEN) private readonly articleModel: Model) {}\n\n  async create(article) {\n    try {\n      return await this.articleModel.create(article);\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n  }\n\n  async list() {\n    try {\n      return await this.articleModel.find();\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }    \n  }\n\n  async update(article, body) {\n  \tarticle.title = body.title;\n  \tarticle.content = body.content;\n    try {\n      return await article.save();\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }  \n  }\n\n  async patch(article, body) {\n    try {\n      return await article.updateAttributes(body);\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }     \n  }\n\n  async delete(article) {\n    try {\n      return await article.remove();\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }      \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookSignIn\n                            \n                            \n                                    Async\n                                googleSignIn\n                            \n                            \n                                    Async\n                                requestFacebookRedirectUrl\n                            \n                            \n                                    Async\n                                requestGoogleRedirectUri\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterFacebookSignIn\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterGoogleSignIn\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterLocalSignIn\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterLocalSignUp\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterTwitterSignIn\n                            \n                            \n                                    Async\n                                requestTwitterRedirectUri\n                            \n                            \n                                    Async\n                                twitterSignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('facebook/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('google/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestFacebookRedirectUrl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFacebookRedirectUrl()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/uri')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestGoogleRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestGoogleRedirectUri()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/uri')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterFacebookSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterFacebookSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('facebook/token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterGoogleSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterGoogleSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('google/token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterLocalSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterLocalSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('local/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterLocalSignUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterLocalSignUp(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('local/signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterTwitterSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterTwitterSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('twitter/token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestTwitterRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestTwitterRedirectUri()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('twitter/uri')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            twitterSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    twitterSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('twitter/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\n\nimport { AuthService } from './auth.service';\nimport { IToken } from './interfaces/token.interface';\nimport { RolesGuard } from '../../guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('local/signup')\n  async requestJsonWebTokenAfterLocalSignUp(@Req() req: Request): Promise {\n    return await this.authService.createUserAndReturnToken(req.body);\n  }\n\n  @Post('local/signin')\n  async requestJsonWebTokenAfterLocalSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n\n  @Get('facebook/uri')\n  async requestFacebookRedirectUrl(): Promise {\n    return await this.authService.requestFacebookRedirectUri();\n  }\n\n  @Post('facebook/signin')\n  async facebookSignIn(@Req() req: Request): Promise {\n    return await this.authService.facebookSignIn(req.body.code);\n  }\n\n  @Post('facebook/token')\n  async requestJsonWebTokenAfterFacebookSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n\n  @Get('twitter/uri')\n  async requestTwitterRedirectUri(): Promise {\n    return await this.authService.requestTwitterRedirectUri();\n  }\n\n  @Post('twitter/signin')\n  async twitterSignIn(@Req() req: Request): Promise {\n    return await this.authService.twitterSignIn(req.body.oauth_token, req.body.oauth_verifier);\n  }\n\n  @Post('twitter/token')\n  async requestJsonWebTokenAfterTwitterSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n\n  @Get('google/uri')\n  async requestGoogleRedirectUri(): Promise {\n    return await this.authService.requestGoogleRedirectUri();\n  }\n\n  @Post('google/signin')\n  async googleSignIn(@Req() req: Request): Promise {\n    return await this.authService.googleSignIn(req.body.code);\n  }\n\n  @Post('google/token')\n  async requestJsonWebTokenAfterGoogleSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTwitterStrategy\n\nTwitterStrategy\n\nAuthModule -->\n\nTwitterStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwitterStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.module.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Module,\n  NestModule,\n  MiddlewareConsumer,\n  RequestMethod,\n} from '@nestjs/common';\nimport { authenticate } from 'passport';\n\n// Strategies\nimport { LocalStrategy } from './passport/local.strategy';\nimport { JwtStrategy } from './passport/jwt.strategy';\nimport { FacebookStrategy } from './passport/facebook.strategy';\nimport { TwitterStrategy } from './passport/twitter.strategy';\nimport { GoogleStrategy } from './passport/google-plus.strategy';\n\nimport { UsersModule } from '../users/users.module';\nimport { authProviders } from './auth.providers';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { bodyValidatorMiddleware } from './middlewares/body-validator.middleware';\nimport { Verifier } from './passport/verifier';\n\n@Module({\n  imports: [UsersModule],\n  providers: [\n    ...authProviders,\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    FacebookStrategy,\n    TwitterStrategy,\n    GoogleStrategy\n  ],\n  controllers: [AuthController]\n})\nexport class AuthModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(bodyValidatorMiddleware)\n      .forRoutes('auth/local/signup');\n    consumer\n      .apply(authenticate('local-signin', { session: false }))\n      .forRoutes('auth/local/signin');\n\n    consumer\n      .apply(authenticate('facebook', { session: false }))\n      .forRoutes('auth/facebook/token');\n\n    consumer\n      .apply(authenticate('twitter', { session: false }))\n      .forRoutes('auth/twitter/token');\n\n    consumer\n      .apply(authenticate('google', { session: false }))\n      .forRoutes('auth/google/token');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                createUserAndReturnToken\n                            \n                            \n                                    Async\n                                facebookSignIn\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                googleSignIn\n                            \n                            \n                                    Private\n                                parseTwitterResponse\n                            \n                            \n                                    Async\n                                requestFacebookRedirectUri\n                            \n                            \n                                    Async\n                                requestGoogleRedirectUri\n                            \n                            \n                                    Async\n                                requestTwitterRedirectUri\n                            \n                            \n                                    Async\n                                twitterSignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, fbConfig: IFacebookConfig, twitterConfig: ITwitterConfig, googleConfig: IGoogleConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fbConfig\n                                                  \n                                                        \n                                                                        IFacebookConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        twitterConfig\n                                                  \n                                                        \n                                                                        ITwitterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        googleConfig\n                                                  \n                                                        \n                                                                        IGoogleConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserAndReturnToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserAndReturnToken(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookSignIn(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleSignIn(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            parseTwitterResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseTwitterResponse(response: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestFacebookRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFacebookRedirectUri()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestGoogleRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestGoogleRedirectUri()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestTwitterRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestTwitterRedirectUri()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            twitterSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    twitterSignIn(oauth_token: string, oauth_verifier: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    oauth_token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oauth_verifier\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:24\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { sign } from 'jsonwebtoken';\nimport { get, post, Response } from 'request';\n\nimport { getErrorMessage } from '../../common/helpers/error-handler';\n\nimport {\n  SERVER_CONFIG,\n  USER_MODEL_TOKEN,\n  FACEBOOK_CONFIG_TOKEN,\n  TWITTER_CONFIG_TOKEN,\n  GOOGLE_CONFIG_TOKEN\n} from '../../server.constants';\nimport { IUser } from '../users/interfaces/user.interface';\nimport { IToken } from './interfaces/token.interface';\nimport { IFacebookConfig } from './interfaces/facebook-config.interface';\nimport { ITwitterConfig } from './interfaces/twitter-config.interface';\nimport { IGoogleConfig } from './interfaces/google-config.interface';\nimport { generateHashedPassword, generateSalt } from '../../utilities/encryption';\n\n@Injectable()\nexport class AuthService {\n  private url: string;\n\n  constructor(\n    @Inject(USER_MODEL_TOKEN) private readonly userModel: Model,\n    @Inject(FACEBOOK_CONFIG_TOKEN) private readonly fbConfig: IFacebookConfig,\n    @Inject(TWITTER_CONFIG_TOKEN) private readonly twitterConfig: ITwitterConfig,\n    @Inject(GOOGLE_CONFIG_TOKEN) private readonly googleConfig: IGoogleConfig\n  ) {\n    this.url = `${SERVER_CONFIG.httpProtocol}://${SERVER_CONFIG.domain}:${SERVER_CONFIG.httpPort}`;\n  }\n\n  async createUserAndReturnToken(user: IUser): Promise {\n    const expiresIn = '48h';\n    const salt: string = generateSalt();\n    const newUser: IUser = new this.userModel({\n      firstName: user.firstName,\n      lastName: user.lastName,\n      displayName: `${user.firstName} ${user.lastName}`,\n      email: user.email,\n      username: user.username,\n      password: generateHashedPassword(salt, user.password),\n      salt,\n      provider: 'local',\n      providerData: null,\n      additionalProvidersData: null,\n      roles: user.roles || 'user'\n    });\n\n    try {\n      await newUser.save();\n      const token = sign({\n        _id: newUser._id\n      }, SERVER_CONFIG.jwtSecret, {\n        expiresIn\n      });\n\n      return  { \n        token \n      };\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n  }\n\n  async createToken(user: IUser): Promise {\n    const expiresIn: string = '48h';\n    const token: string = sign({\n      _id: user.id\n    }, SERVER_CONFIG.jwtSecret, {expiresIn});\n\n    return {\n      token\n    };\n  }\n\n  async findUserById(id: string): Promise {\n    return await this.userModel.findById(id);\n  }\n\n  async requestFacebookRedirectUri(): Promise {\n    const queryParams: string[] = [\n      `client_id=${this.fbConfig.client_id}`,\n      `redirect_uri=${this.fbConfig.oauth_redirect_uri}`,\n      `state=${this.fbConfig.state}`\n    ];\n    const redirect_uri: string = `${this.fbConfig.login_dialog_uri}?${queryParams.join('&')}`;\n\n    return {\n      redirect_uri\n    };\n  }\n\n  async facebookSignIn(code: string): Promise {\n    const queryParams: string[] = [\n      `client_id=${this.fbConfig.client_id}`,\n      `redirect_uri=${this.fbConfig.oauth_redirect_uri}`,\n      `client_secret=${this.fbConfig.client_secret}`,\n      `code=${code}`\n    ];\n\n    const uri: string = `${this.fbConfig.access_token_uri}?${queryParams.join('&')}`;\n\n    return new Promise((resolve: Function, reject: Function) => {\n      get(uri, (error: Error, response: Response, body: any) => {\n        if (error) {\n          return reject(error);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { access_token } = JSON.parse(body);\n\n        post({\n          url: `${this.url}/api/auth/facebook/token`,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          form: {\n            access_token\n          }\n        }, async (err: Error, res: Response, body: any) => {\n          if (err) {\n            return reject(err);\n          }\n\n          if (body.error) {\n            return reject(body.error);\n          }\n          resolve(body);\n        });\n      });\n    });\n  }\n\n  async requestTwitterRedirectUri(): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      post({\n        url: this.twitterConfig.request_token_uri,\n        oauth: {\n          consumer_key: this.twitterConfig.consumer_key,\n          consumer_secret: this.twitterConfig.consumer_secret,\n          callback: this.twitterConfig.oauth_redirect_uri\n        },\n      }, async (err: Error, res: Response, body: any) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { oauth_token } = this.parseTwitterResponse(body);\n        const redirect_uri: string = `${this.twitterConfig.login_dialog_uri}?oauth_token=${oauth_token}`;\n\n        resolve({\n          redirect_uri\n        });\n      });\n    });\n  }\n\n  async twitterSignIn(oauth_token: string, oauth_verifier: string): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      post({\n        url: this.twitterConfig.access_token_uri,\n        oauth: {\n          consumer_key: this.twitterConfig.consumer_key,\n          consumer_secret: this.twitterConfig.consumer_secret,\n          token: oauth_token,\n          verifier: oauth_verifier\n        }\n      }, async (err: Error, res: Response, body: any) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { oauth_token, oauth_token_secret, user_id } = this.parseTwitterResponse(body);\n\n        post({\n          url: `${this.url}/api/auth/twitter/token`,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          form: {\n            oauth_token,\n            oauth_token_secret,\n            user_id\n          }\n        }, async (err: Error, res: Response, body: any) => {\n          if (err) {\n            return reject(err);\n          }\n\n          if (body.error) {\n            return reject(body.error);\n          }\n\n          resolve(body);\n        });\n      });\n    });\n  }\n\n  async requestGoogleRedirectUri(): Promise {\n    const queryParams: string[] = [\n      `client_id=${this.googleConfig.client_id}`,\n      `redirect_uri=${this.googleConfig.oauth_redirect_uri}`,\n      `response_type=${this.googleConfig.response_type}`,\n      `scope=${this.googleConfig.scopes.join(' ')}`\n    ];\n    const redirect_uri: string = `${this.googleConfig.login_dialog_uri}?${queryParams.join('&')}`;\n\n    return {\n      redirect_uri\n    };\n  }\n\n  async googleSignIn(code: string): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      post({\n        url: this.googleConfig.access_token_uri,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        form: {\n          code,\n          client_id: this.googleConfig.client_id,\n          client_secret: this.googleConfig.client_secret,\n          redirect_uri: this.googleConfig.oauth_redirect_uri,\n          grant_type: this.googleConfig.grant_type\n        }\n      }, async (err: Error, res: Response, body: any) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { access_token } = JSON.parse(body);\n\n        post({\n          url: `${this.url}/api/auth/google/token`,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          form: {\n            access_token\n          }\n        }, async (err: Error, res: Response, body: any) => {\n          if (err) {\n            return reject(err);\n          }\n\n          if (body.error) {\n            return reject(body.error);\n          }\n\n          resolve(body);\n        });\n      });\n    });\n  }\n\n  private parseTwitterResponse(response: string): {[key: string]: string | boolean} {\n    const regex: RegExp = /([a-z_]+?)=([a-zA-Z0-9_-]+)/g;\n    const parsedResponse: {[key: string]: string} = {};\n\n    let match: RegExpMatchArray = regex.exec(response);\n\n    while (match) {\n      match.shift();\n\n      parsedResponse[match.shift()] = match.shift();\n\n      match = regex.exec(response);\n    }\n\n    return parsedResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentService.html":{"url":"classes/EnvironmentService.html","title":"class - EnvironmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/environment.variables.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/environment.variables.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/environment.variables.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/environment.variables.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport { readFileSync } from 'fs';\n\nexport class EnvironmentService {\n  private readonly envConfig: { [prop: string]: string };\n\n  constructor(filePath: string) {\n    this.envConfig = parse(readFileSync(filePath))\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/facebook.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fbConfig: IFacebookConfig, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/facebook.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fbConfig\n                                                  \n                                                        \n                                                                        IFacebookConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/facebook.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { use } from 'passport';\n\nimport { FACEBOOK_CONFIG_TOKEN, USER_MODEL_TOKEN } from '../../../server.constants';\nimport { IFacebookConfig } from '../interfaces/facebook-config.interface';\nimport { IUser } from '../../users/interfaces/user.interface';\n\nconst FacebookTokenStrategy = require('passport-facebook-token');\n\n@Injectable()\nexport class FacebookStrategy {\n  constructor(\n    @Inject(FACEBOOK_CONFIG_TOKEN) private readonly fbConfig: IFacebookConfig,\n    @Inject(USER_MODEL_TOKEN) private readonly userModel: Model\n  ) {\n    this.init();\n  }\n\n  private init(): void {\n    use('facebook', new FacebookTokenStrategy({\n      clientID: this.fbConfig.client_id,\n      clientSecret: this.fbConfig.client_secret,\n      profileFields: ['id', 'name', 'displayName', 'emails', 'photos']\n    }, async (accessToken: string, refreshToken: string, profile: any, done: Function) => {\n      try {\n        var providerData = profile._json;\n        providerData.accessToken = accessToken;\n        providerData.refreshToken = refreshToken;\n\n        let email: string = profile.emails.shift().value;\n\n        //  Conditional if facebook doesn't return email\n        if (!email || email === '') email = `${profile.id}@${profile.provider}.com`;\n\n        const existingUser: IUser = await this.userModel.findOne({ email: email });\n\n        if (existingUser) {\n          return done(null, existingUser);\n        }\n  \n        var providerUserProfile = {\n          firstName: profile.name.givenName,\n          lastName: profile.name.familyName,\n          displayName: profile.displayName,\n          email: email,\n          username: profile.username || `${profile.id}`,\n          profileImageURL: (profile.id) ? '//graph.facebook.com/' + profile.id + '/picture?type=large' : undefined,\n          provider: 'facebook',\n          providerIdentifierField: 'id',\n          providerData: providerData\n        };\n\n        const user = new this.userModel(providerUserProfile);\n        \n        done(null, await user.save());\n      } catch (err) {\n        done(err, null);\n      }\n\n      function generateUsername(profile) {\n        var username = '';\n\n        if (profile.emails) {\n          username = profile.emails[0].value.split('@')[0];\n        } else if (profile.name) {\n          username = profile.name.givenName[0] + profile.name.familyName;\n        }\n\n        return username.toLowerCase() || undefined;\n      }\n    }));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/google-plus.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(googleConfig: IGoogleConfig, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/google-plus.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        googleConfig\n                                                  \n                                                        \n                                                                        IGoogleConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/google-plus.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { use } from 'passport';\nimport { v1 } from 'uuid';\n\nimport { GOOGLE_CONFIG_TOKEN, USER_MODEL_TOKEN } from '../../../server.constants';\nimport { IGoogleConfig } from '../interfaces/google-config.interface';\nimport { IUser } from '../../users/interfaces/user.interface';\n\nconst GoogleTokenStrategy = require('passport-google-plus-token');\n\n@Injectable()\nexport class GoogleStrategy {\n  constructor(\n    @Inject(GOOGLE_CONFIG_TOKEN) private readonly googleConfig: IGoogleConfig,\n    @Inject(USER_MODEL_TOKEN) private readonly userModel: Model\n  ) {\n    this.init();\n  }\n\n  private init(): void {\n    use('google', new GoogleTokenStrategy({\n      clientID: this.googleConfig.client_id,\n      clientSecret: this.googleConfig.client_secret\n    }, async (accessToken: string, refreshToken: string, profile: any, done: Function) => {\n      try {\n        // Set the provider data and include tokens\n        var providerData = profile._json;\n        providerData.accessToken = accessToken;\n        providerData.refreshToken = refreshToken;\n        const existingUser = await this.userModel.findOne({ email: profile.emails[0].value });\n\n        if (existingUser) {\n          return done(null, existingUser);\n        }\n        // Create the user OAuth profile\n        var providerUserProfile = {\n          firstName: profile.name.givenName,\n          lastName: profile.name.familyName,\n          displayName: profile.displayName,\n          email: profile.emails[0].value,\n          username: profile.username,\n          profileImageURL: (providerData.picture) ? providerData.picture : providerData.image.url,\n          provider: 'google',\n          providerIdentifierField: 'id',\n          providerData: providerData\n        };\n        if (!providerUserProfile.username) providerUserProfile.username = v1();\n        const user = new this.userModel(providerUserProfile);\n        done(null, await user.save());\n      } catch (ex) {\n        done(ex, null);\n      }\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IArticle.html":{"url":"interfaces/IArticle.html","title":"interface - IArticle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IArticle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/interfaces/article.interface.ts\n        \n\n            \n                Description\n            \n            \n                Declaring the Interface Article\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        content\n                                \n                                \n                                        created\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created\n                                    \n                                \n                                \n                                    \n                                        created:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\n/**\n *  Declaring the Interface Article\n */\nexport interface IArticle extends Document {\n  created: Date;\n  title: string;\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfig.html":{"url":"interfaces/IConfig.html","title":"interface - IConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.ts\n        \n\n            \n                Description\n            \n            \n                Creamos una interface \"IConfig\", la cual contendrá a IEnvironmentConfig\nEstos objetos tipados implementan la interfaz IEnvironmentConfig con los\nEntornos de desarrollo y produccion (según se implemente);\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        development\n                                \n                                \n                                        production\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        IEnvironmentConfig\n\n                    \n                \n                        \n                            \n                                Defined in src/config/config.ts:27\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        development\n                                    \n                                \n                                \n                                    \n                                        development:         IEnvironmentConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnvironmentConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                    \n                                \n                                \n                                    \n                                        production:         IEnvironmentConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnvironmentConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EnvironmentService } from '../environment.variables';\nimport { extractKey } from '../utilities/keys';\n\nlet environmentService = new EnvironmentService('.env');\n/**\n *  Creamos la interface IEnvironmentConfig la cual obtendrá todas \n *  las propiedades de nuestro entorno de trabajo.\n */\ninterface IEnvironmentConfig {\n  rootPath: string;\n  db: string;\n  httpPort: number;\n  wsPort: number;\n  jwtSecret: string;\n  domain: string;\n  httpProtocol: string;\n  wsProtocol: string;\n  awsKey: string;\n  awsSecret: string;\n}\n\n/**\n *  Creamos una interface \"IConfig\", la cual contendrá a IEnvironmentConfig\n *  Estos objetos tipados implementan la interfaz IEnvironmentConfig con los\n *  Entornos de desarrollo y produccion (según se implemente);\n */\ninterface IConfig {\n  [key: string]: IEnvironmentConfig;\n  development: IEnvironmentConfig;\n  production: IEnvironmentConfig;\n}\n\n/**\n *  Seteamos la variable rootPath, para saber la ruta en la cual se encuentra el servidor.\n */\nconst rootPath = process.cwd();\n\n/**\n *  En la constante jwtSecret asignamos la llave creada en /keys/jwt.private.key\n */\nconst jwtSecret = extractKey(`${rootPath}/keys/jwt.private.key`);\n\n/**\n *  Definimos los valores para local y produccion\n */\nconst Config: IConfig = {\n  development: {\n    rootPath,\n    db: 'mongodb://localhost:27017/store',\n    httpPort: 1337,\n    wsPort: 1338,\n    jwtSecret,\n    domain: 'localhost',\n    httpProtocol: 'http',\n    wsProtocol: 'ws',\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  },\n  production: {\n    rootPath,\n    db: environmentService.get('MONGODB_CONNECTION'),\n    httpPort: + environmentService.get('HTTP_SERVER_PORT'),\n    wsPort: + environmentService.get('WS_PORT'),\n    jwtSecret,\n    domain: environmentService.get('DOMAIN'),\n    httpProtocol: environmentService.get('HTTP_PROTOCOL'),\n    wsProtocol: environmentService.get('WS_PROTOCOL'),\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  }\n};\n\nexport {\n  IEnvironmentConfig,\n  IConfig,\n  Config\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEnvironmentConfig.html":{"url":"interfaces/IEnvironmentConfig.html","title":"interface - IEnvironmentConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEnvironmentConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.ts\n        \n\n            \n                Description\n            \n            \n                Creamos la interface IEnvironmentConfig la cual obtendrá todas \nlas propiedades de nuestro entorno de trabajo.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        awsKey\n                                \n                                \n                                        awsSecret\n                                \n                                \n                                        db\n                                \n                                \n                                        domain\n                                \n                                \n                                        httpPort\n                                \n                                \n                                        httpProtocol\n                                \n                                \n                                        jwtSecret\n                                \n                                \n                                        rootPath\n                                \n                                \n                                        wsPort\n                                \n                                \n                                        wsProtocol\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        awsKey\n                                    \n                                \n                                \n                                    \n                                        awsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsSecret\n                                    \n                                \n                                \n                                    \n                                        awsSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        db\n                                    \n                                \n                                \n                                    \n                                        db:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpPort\n                                    \n                                \n                                \n                                    \n                                        httpPort:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpProtocol\n                                    \n                                \n                                \n                                    \n                                        httpProtocol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwtSecret\n                                    \n                                \n                                \n                                    \n                                        jwtSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rootPath\n                                    \n                                \n                                \n                                    \n                                        rootPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wsPort\n                                    \n                                \n                                \n                                    \n                                        wsPort:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wsProtocol\n                                    \n                                \n                                \n                                    \n                                        wsProtocol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EnvironmentService } from '../environment.variables';\nimport { extractKey } from '../utilities/keys';\n\nlet environmentService = new EnvironmentService('.env');\n/**\n *  Creamos la interface IEnvironmentConfig la cual obtendrá todas \n *  las propiedades de nuestro entorno de trabajo.\n */\ninterface IEnvironmentConfig {\n  rootPath: string;\n  db: string;\n  httpPort: number;\n  wsPort: number;\n  jwtSecret: string;\n  domain: string;\n  httpProtocol: string;\n  wsProtocol: string;\n  awsKey: string;\n  awsSecret: string;\n}\n\n/**\n *  Creamos una interface \"IConfig\", la cual contendrá a IEnvironmentConfig\n *  Estos objetos tipados implementan la interfaz IEnvironmentConfig con los\n *  Entornos de desarrollo y produccion (según se implemente);\n */\ninterface IConfig {\n  [key: string]: IEnvironmentConfig;\n  development: IEnvironmentConfig;\n  production: IEnvironmentConfig;\n}\n\n/**\n *  Seteamos la variable rootPath, para saber la ruta en la cual se encuentra el servidor.\n */\nconst rootPath = process.cwd();\n\n/**\n *  En la constante jwtSecret asignamos la llave creada en /keys/jwt.private.key\n */\nconst jwtSecret = extractKey(`${rootPath}/keys/jwt.private.key`);\n\n/**\n *  Definimos los valores para local y produccion\n */\nconst Config: IConfig = {\n  development: {\n    rootPath,\n    db: 'mongodb://localhost:27017/store',\n    httpPort: 1337,\n    wsPort: 1338,\n    jwtSecret,\n    domain: 'localhost',\n    httpProtocol: 'http',\n    wsProtocol: 'ws',\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  },\n  production: {\n    rootPath,\n    db: environmentService.get('MONGODB_CONNECTION'),\n    httpPort: + environmentService.get('HTTP_SERVER_PORT'),\n    wsPort: + environmentService.get('WS_PORT'),\n    jwtSecret,\n    domain: environmentService.get('DOMAIN'),\n    httpProtocol: environmentService.get('HTTP_PROTOCOL'),\n    wsProtocol: environmentService.get('WS_PROTOCOL'),\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  }\n};\n\nexport {\n  IEnvironmentConfig,\n  IConfig,\n  Config\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFacebookConfig.html":{"url":"interfaces/IFacebookConfig.html","title":"interface - IFacebookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFacebookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/facebook-config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_uri\n                                \n                                \n                                        client_id\n                                \n                                \n                                        client_secret\n                                \n                                \n                                        login_dialog_uri\n                                \n                                \n                                        oauth_redirect_uri\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_uri\n                                    \n                                \n                                \n                                    \n                                        access_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_secret\n                                    \n                                \n                                \n                                    \n                                        client_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login_dialog_uri\n                                    \n                                \n                                \n                                    \n                                        login_dialog_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauth_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        oauth_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IFacebookConfig {\n  readonly login_dialog_uri: string;\n  readonly access_token_uri: string;\n  readonly client_id: string;\n  readonly client_secret: string;\n  readonly oauth_redirect_uri: string;\n  readonly state: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGoogleConfig.html":{"url":"interfaces/IGoogleConfig.html","title":"interface - IGoogleConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGoogleConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/google-config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_uri\n                                \n                                \n                                        client_id\n                                \n                                \n                                        client_secret\n                                \n                                \n                                        grant_type\n                                \n                                \n                                        login_dialog_uri\n                                \n                                \n                                        oauth_redirect_uri\n                                \n                                \n                                        response_type\n                                \n                                \n                                        scopes\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_uri\n                                    \n                                \n                                \n                                    \n                                        access_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_secret\n                                    \n                                \n                                \n                                    \n                                        client_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grant_type\n                                    \n                                \n                                \n                                    \n                                        grant_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login_dialog_uri\n                                    \n                                \n                                \n                                    \n                                        login_dialog_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauth_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        oauth_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response_type\n                                    \n                                \n                                \n                                    \n                                        response_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IGoogleConfig {\n  readonly login_dialog_uri: string;\n  readonly client_id: string;\n  readonly client_secret: string;\n  readonly oauth_redirect_uri: string;\n  readonly access_token_uri: string;\n  readonly response_type: string;\n  readonly scopes: string[];\n  readonly grant_type: string;\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        exp\n                                \n                                \n                                        iat\n                                \n                                \n                                        sub\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJwtPayload {\n  readonly sub: string;\n  readonly iat: number;\n  readonly exp: number;\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IToken.html":{"url":"interfaces/IToken.html","title":"interface - IToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IToken {\n  readonly token: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITwitterConfig.html":{"url":"interfaces/ITwitterConfig.html","title":"interface - ITwitterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITwitterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/twitter-config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_uri\n                                \n                                \n                                        consumer_key\n                                \n                                \n                                        consumer_secret\n                                \n                                \n                                        login_dialog_uri\n                                \n                                \n                                        oauth_redirect_uri\n                                \n                                \n                                        request_token_uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_uri\n                                    \n                                \n                                \n                                    \n                                        access_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        consumer_key\n                                    \n                                \n                                \n                                    \n                                        consumer_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        consumer_secret\n                                    \n                                \n                                \n                                    \n                                        consumer_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login_dialog_uri\n                                    \n                                \n                                \n                                    \n                                        login_dialog_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauth_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        oauth_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request_token_uri\n                                    \n                                \n                                \n                                    \n                                        request_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITwitterConfig {\n  readonly consumer_key: string;\n  readonly consumer_secret: string;\n  readonly request_token_uri: string;\n  readonly login_dialog_uri: string;\n  readonly access_token_uri: string;\n  readonly oauth_redirect_uri: string;\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/user.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                                \n                                        additionalProvidersData\n                                \n                                \n                                        created\n                                \n                                \n                                        displayName\n                                \n                                \n                                        email\n                                \n                                \n                                        firstName\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        profileImageURL\n                                \n                                \n                                        provider\n                                \n                                \n                                        providerData\n                                \n                                \n                                        resetPasswordExpires\n                                \n                                \n                                        resetPasswordToken\n                                \n                                \n                                        roles\n                                \n                                \n                                        salt\n                                \n                                \n                                        updated\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        additionalProvidersData\n                                    \n                                \n                                \n                                    \n                                        additionalProvidersData:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created\n                                    \n                                \n                                \n                                    \n                                        created:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImageURL\n                                    \n                                \n                                \n                                    \n                                        profileImageURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providerData\n                                    \n                                \n                                \n                                    \n                                        providerData:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resetPasswordExpires\n                                    \n                                \n                                \n                                    \n                                        resetPasswordExpires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resetPasswordToken\n                                    \n                                \n                                \n                                    \n                                        resetPasswordToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        salt\n                                    \n                                \n                                \n                                    \n                                        salt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated\n                                    \n                                \n                                \n                                    \n                                        updated:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface IUser extends Document {\n  created: Date;\n  firstName: string;\n  lastName: string;\n  displayName: string;\n  email: string;\n  username: string;\n  active: boolean;\n  password: string;\n  profileImageURL: string;\n  salt: string;\n  provider: string;\n  providerData: object;\n  additionalProvidersData: object;\n  roles: string[];\n  updated: Date;\n  resetPasswordToken: string;\n  resetPasswordExpires: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload, done: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { AuthService } from '../auth.service';\nimport { SERVER_CONFIG } from '../../../server.constants';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { IJwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: SERVER_CONFIG.jwtSecret\n    });\n  }\n\n  public async validate(payload: IJwtPayload, done: Function) {\n    const user: IUser = await this.authService.findUserById(payload.sub);\n\n    if (!user) {\n      return done(new UnauthorizedException(), false);\n    }\n\n    done(null, user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/local.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/local.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, Inject } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { use } from 'passport';\nimport { Strategy } from 'passport-local';\n\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { generateHashedPassword, generateSalt } from '../../../utilities/encryption';\nimport { MESSAGES, USER_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\nexport class LocalStrategy {\n  constructor(\n    @Inject(USER_MODEL_TOKEN) private readonly userModel: Model\n  ) {\n    this.init();\n  }\n\n  private init(): void {\n    use('local-signin', new Strategy({\n      usernameField: 'email',\n      passwordField: 'password'\n    }, async (email: string, password: string, done: Function) => {\n      try {\n        const user: IUser = await this.userModel.findOne({ email: email });\n\n        if (!user) {\n          return done(new UnauthorizedException(MESSAGES.UNAUTHORIZED_INVALID_EMAIL), false);\n        }\n\n        if (generateHashedPassword(user.salt, password) !== user.password) {\n          return done(new UnauthorizedException(MESSAGES.UNAUTHORIZED_INVALID_PASSWORD), false);\n        }\n\n        done(null, user);\n      } catch (error) {\n        done(error, false);\n      }\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/logger.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/logger.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport * as chalk from 'chalk';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n\tuse(req, res, next: Function) {\n    let logMessage;\n    const log = chalk.default;\n    logMessage = `Url: ${req.baseUrl}`;\n    console.log(log.white(logMessage));\n    next();\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/roles.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, Inject } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { IUser } from '../modules/users/interfaces/user.interface';\nimport { Model } from 'mongoose';\nimport { USER_MODEL_TOKEN, SERVER_CONFIG } from '../server.constants';\n\nimport { verify } from 'jsonwebtoken';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {\n    console.log('Roles Guard is called');\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const req = context.switchToHttp().getRequest();\n    const user = req.user;\n    \n    const hasRole = () => user['roles'].some((role: string) => role.includes(role));\n    return user && user['roles'] && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenMiddleware.html":{"url":"injectables/TokenMiddleware.html","title":"injectable - TokenMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/token.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/token.middleware.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/token.middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as chalk from 'chalk';\nimport { Model } from 'mongoose';\nimport { verify } from 'jsonwebtoken';\n\nimport { USER_MODEL_TOKEN, SERVER_CONFIG } from '../../server.constants';\nimport { IUser } from '../../modules/users/interfaces/user.interface';\n\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n\tconstructor(@Inject(USER_MODEL_TOKEN) private readonly userModel: Model) {}\n\tasync use(req: Request, res: Response, next: Function) {\n\t\treq.user = {};\n\t\tlet parsedToken = {};\n\t\tconst token: any = req.headers.authorization || req.headers.Authorization;\n\t\tif (token) {\n\t\t\ttry {\n\t\t\t\tparsedToken = verify(token, SERVER_CONFIG.jwtSecret);\n\t\t\t\treq.user =  await this.userModel.findById(parsedToken['_id']).select('-local.salt -local.hashedPassword');\n\t\t\t} catch (ex) {\n\t\t\t\treturn res.status(500).send(ex);\n\t\t\t}\n\t\t}\n\t\tnext();\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwitterStrategy.html":{"url":"injectables/TwitterStrategy.html","title":"injectable - TwitterStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TwitterStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/twitter.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(twitterConfig: ITwitterConfig, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/twitter.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        twitterConfig\n                                                  \n                                                        \n                                                                        ITwitterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/twitter.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { use } from 'passport';\n\nimport { USER_MODEL_TOKEN, TWITTER_CONFIG_TOKEN } from '../../../server.constants';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { ITwitterConfig } from '../interfaces/twitter-config.interface';\n\nconst TwitterTokenStrategy = require('passport-twitter-token');\n\n@Injectable()\nexport class TwitterStrategy {\n  constructor(\n    @Inject(TWITTER_CONFIG_TOKEN) private readonly twitterConfig: ITwitterConfig,\n    @Inject(USER_MODEL_TOKEN) private readonly userModel: Model\n  ) {\n    this.init();\n  }\n\n  private init(): void {\n    use('twitter', new TwitterTokenStrategy({\n      consumerKey: this.twitterConfig.consumer_key,\n      consumerSecret: this.twitterConfig.consumer_secret\n    }, async (accessToken: string, refreshToken: string, profile: any, done: Function) => {\n      try {\n        const existingUser: IUser = await this.userModel.findOne({ 'twitter.id': profile.id });\n\n        if (existingUser) {\n          return done(null, existingUser);\n        }\n\n        const { id, username, displayName } = profile;\n        const user: IUser = new this.userModel({\n          method: 'twitter',\n          roles: ['user'],\n          displayName,\n          twitter: {\n            id,\n            username\n          }\n        });\n\n        done(null, await user.save());\n      } catch (err) {\n        done(err, null);\n      }\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserIdMiddleware.html":{"url":"injectables/UserIdMiddleware.html","title":"injectable - UserIdMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserIdMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/middlewares/userbyId.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/middlewares/userbyId.middleware.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/middlewares/userbyId.middleware.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { \n  BadRequestException,\n  UnauthorizedException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Model, Types } from 'mongoose';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { MESSAGES, USER_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\nexport class UserIdMiddleware implements NestMiddleware {\n  constructor(@Inject(USER_MODEL_TOKEN) private readonly userModel: Model) {}\n    async use(req, res, next: Function) {\n      const allowedRoutes = ['me', 'upload'];\n      const isAllowedRoute = (allowedRoutes.indexOf(req.params.id) > -1);\n      if(isAllowedRoute) return next();\n\n      else if(!Types.ObjectId.isValid(req.params.id)) return next(new UnauthorizedException('User is invalid'));\n      const user = await this.userModel.findById(req.params.id).select('-local.salt  -local.hashedPassword');\n      if (user) {\n        req.model = user;\n        next();\n      }\n      else return next(new UnauthorizedException('No user with that identifier has been found'));\n    };\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(query?)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(userModel: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userModel\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateProfileImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileImage(user, file)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(user, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model } from 'mongoose';\n\nimport { USER_MODEL_TOKEN, SERVER_CONFIG } from '../../server.constants';\nimport { IUser } from './interfaces/user.interface';\nimport { isEmptyObject } from '../../common/helpers/utils';\n\nimport { parseImageURL } from '../../common/helpers/converters';\n@Injectable()\nexport class UserService {\n  constructor(@Inject(USER_MODEL_TOKEN) private readonly userModel: Model) {}\n\n  async me(userModel: IUser) {\n  \treturn userModel;\n  }\n  \n  async getUsers(query?): Promise {\n    return await this.userModel.find(query).select('-local.salt  -local.hashedPassword');\n  }\n\n  async updateProfileImage(user, file): Promise {\n    user.profileImageURL = file.location || `/${parseImageURL(file.path)}`;\n    return await user.save();\n  }\n\n  async getUserById(userId): Promise {\n    return await this.userModel.findById(userId).select('-salt -password');\n  }\n\n  async deleteUser(user) {\n    return await user.remove();\n  }\n\n  async updateUser(user, body) {\n    const google = user.google.id;\n    const local = user.local.email;\n    const twitter = user.twitter.id;\n    const facebook = user.facebook.id;\n\n    if(google) {\n      //  Do stuff updating google\n    } else if (twitter) {\n      //  Do stuff updating twitter\n    } else if (facebook) {\n      //  Do stuff updating facebook\n    } else {\n      //  Do stuff updating local\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                updateUserById\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Roles('admin', 'superadmin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('user', 'admin', 'superadmin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('upload')@Roles('user', 'admin')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller,\n  Post, \n  Get,\n  Put,\n  Delete,\n  Param,\n  Req, \n  UseGuards, \n  UploadedFile, \n  UseInterceptors } from '@nestjs/common';\n\n  import { FileInterceptor } from '@nestjs/platform-express';\n\nimport { UserService } from './users.service';\n\n// Guards\nimport { RolesGuard } from '../../guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\n\nimport { MulterConfig } from '../../config/multer';\n\n@Controller('users')\n@UseGuards(RolesGuard)\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n  /* --------------------------------------------------------------------\n\n    Module     : Users\n    Controller : User Controller\n\n    ---------------------------------------------------------------------\n\n    Description :\n    \n    Aditional information: All role routes are working with Guards, and Guards \n    are defining the current req.user value.\n\n    Middleware description: \n\n    Route:\n    /api/users    \n   ----------------------------------------------------------------------*/\n\n  /* \n    Route:        GET api/users/me \n    Roles:        user, admin\n    Description:  Get the current session user information based in authenticated token.\n  */\n\n  @Get('me')\n  @Roles('user', 'admin')\n  async me(@Req() req) {\n  \treturn await this.userService.me(req.user);\n  }\n\n  /* \n    Route:        PUT api/users/upload \n    Roles:        user, admin\n    Description:  Get user by provided Id.\n  */\n\n  @Put('upload')\n  @Roles('user', 'admin')\n  @UseInterceptors(FileInterceptor('file', MulterConfig))\n  async uploadFile(@UploadedFile() file, @Req() req) {\n    const user = req.user;\n    return await this.userService.updateProfileImage(user, file);\n  }\n\n  /* \n    Route:        GET api/users/:id \n    Roles:        user, admin\n    Description:  Get user by provided Id.\n  */\n\n  @Get(':id')\n  @Roles('user', 'admin')\n  async getUserById(@Req() req) {\n    let user = req.model;\n    return user;\n  }\n\n  /* \n    Route:        PUT api/users/:id \n    Roles:        user, admin\n    Description:  Get user by provided Id.\n  */\n\n  @Put(':id')\n  @Roles('user', 'admin')\n  async updateUserById(@Req() req) {\n    const user = await this.userService.updateUser(req.model, req.body);\n    return user;\n  }\n\n  /* \n    Route:        GET api/users \n    Roles:        user, admin, superadmin\n    Description:  Get all users in database.\n  */\n  @Get()\n  @Roles('user', 'admin', 'superadmin')\n  async getUsers(@Req() req) {\n    let query = req.query;\n    return await this.userService.getUsers(query);\n  }\n\n  /* \n    Route:        DELETE api/users \n    Roles:        admin, superadmin\n    Description:  Delete user provide by id.\n  */\n\n  @Delete(':id')\n  @Roles('admin', 'superadmin')\n  async deleteUser(@Req() req) {\n    const user = req.model;\n    return await this.userService.deleteUser(user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer, RequestMethod } from '@nestjs/common';\n\nimport { DatabaseModule } from '../../database';\nimport { UsersController } from './users.controller';\nimport { userProviders } from './users.providers';\nimport { UserService } from './users.service';\n\nimport { UserIdMiddleware } from './middlewares/userbyId.middleware';\n//  Middlewares\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UsersController],\n  providers: [\n    ...userProviders,\n    UserService\n  ],\n  exports: [\n    ...userProviders\n  ]\n})\nexport class UsersModule implements NestModule{\n  public configure(consumer: MiddlewareConsumer) {\n\n    consumer\n      .apply(UserIdMiddleware)\n      .forRoutes({ path: 'users/:id', method: RequestMethod.ALL });\n      //  users id calling middleware for findById users before run another methods like \"delete/update/read\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Verifier.html":{"url":"injectables/Verifier.html","title":"injectable - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Verifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/verifier.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/verifier.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/verifier.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, NestMiddleware, UnauthorizedException, Injectable, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Model } from 'mongoose';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { MESSAGES, USER_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\nexport class Verifier implements NestMiddleware {\n  constructor(@Inject(USER_MODEL_TOKEN) private readonly userModel: Model) {}\n    async use(req: Request, res: Response, next: Function) {\n      const user = await this.userModel.findOne({ email: req.body.email });\n      if (!user) next();\n      else return next(new UnauthorizedException(MESSAGES.UNAUTHORIZED_EMAIL_OR_USERNAME_IN_USE));\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/articleValidatorMiddleware.html":{"url":"injectables/articleValidatorMiddleware.html","title":"injectable - articleValidatorMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  articleValidatorMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/middlewares/article-validator.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/middlewares/article-validator.middleware.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/middlewares/article-validator.middleware.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { validate } from 'joi';\nimport { articleSchema } from '../../articles/joi/article.joi';\n\nimport { Model, Types } from 'mongoose';\nimport { IArticle } from '../../articles/interfaces/article.interface';\nimport { MESSAGES, ARTICLE_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\n/**\n *  Article By Id Middleware\n *  We validating if the Id provided is valid, and returning the found article in the variable req.article\n */\nexport class articleValidatorMiddleware implements NestMiddleware {\n  constructor() {\n  }\n  async use(req, res, next: Function) {\n    const result = validate(req.body, articleSchema);\n\n    if (result.error) {\n      const errorMessage = result.error.details.shift().message;\n      const message: string = errorMessage.replace(/[\"]/g, '');\n\n      return next(new BadRequestException(`Validation failed: ${message}`));\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/bodyValidatorMiddleware.html":{"url":"injectables/bodyValidatorMiddleware.html","title":"injectable - bodyValidatorMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  bodyValidatorMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/middlewares/body-validator.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/middlewares/body-validator.middleware.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/middlewares/body-validator.middleware.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { validate } from 'joi';\nimport { authUserSchema } from '../../users/joi/auth-user.joi';\n\nimport { Model, Types } from 'mongoose';\nimport { IArticle } from '../../articles/interfaces/article.interface';\nimport { MESSAGES, ARTICLE_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\n/**\n *  Article By Id Middleware\n *  We validating if the Id provided is valid, and returning the found article in the variable req.article\n */\nexport class bodyValidatorMiddleware implements NestMiddleware {\n  constructor() {\n    console.log('Initializing Body Validator Middleware');\n  }\n  async use(req, res, next: Function) {\n    console.log('HI, IM A MIDDLEWARE');\n    const result = validate(req.body, authUserSchema);\n\n    if (result.error) {\n      const errorMessage = result.error.details.shift().message;\n      const message: string = errorMessage.replace(/[\"]/g, '');\n\n      return next(new BadRequestException(`Validation failed: ${message}`));\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.gateway.ts\n            \n            class\n            AppGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/helpers/converters.ts\n            \n            variable\n            parseImageURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/error-handler.ts\n            \n            function\n            getErrorMessage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/error-handler.ts\n            \n            function\n            getUniqueErrorMessage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/utils.ts\n            \n            function\n            isEmptyObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/middlewares/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middlewares/token.middleware.ts\n            \n            injectable\n            TokenMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            interface\n            IConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            interface\n            IEnvironmentConfig\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            Config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            environmentService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            jwtSecret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            rootPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer.ts\n            \n            variable\n            environmentService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer.ts\n            \n            variable\n            MulterConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer.ts\n            \n            variable\n            storage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            opts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environment.variables.ts\n            \n            class\n            EnvironmentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.controller.ts\n            \n            controller\n            ArticlesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.gateway.ts\n            \n            class\n            ArticlesGateway\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.providers.ts\n            \n            variable\n            articleProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.service.ts\n            \n            injectable\n            ArticlesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/articles/interfaces/article.interface.ts\n            \n            interface\n            IArticle\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/modules/articles/joi/article.joi.ts\n            \n            variable\n            articleSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/articles/middlewares/article-validator.middleware.ts\n            \n            injectable\n            articleValidatorMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/articles/middlewares/articleById.middleware.ts\n            \n            injectable\n            ArticleIdMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/articles/schemas/article.schema.ts\n            \n            variable\n            ArticleSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.providers.ts\n            \n            variable\n            authProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/config/facebook-config.ts\n            \n            variable\n            facebookConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/config/google-config.ts\n            \n            variable\n            googleConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/config/twitter-config.ts\n            \n            variable\n            twitterConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/facebook-config.interface.ts\n            \n            interface\n            IFacebookConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/google-config.interface.ts\n            \n            interface\n            IGoogleConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/token.interface.ts\n            \n            interface\n            IToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/twitter-config.interface.ts\n            \n            interface\n            ITwitterConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/middlewares/body-validator.middleware.ts\n            \n            injectable\n            bodyValidatorMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/facebook.strategy.ts\n            \n            variable\n            FacebookTokenStrategy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/google-plus.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/google-plus.strategy.ts\n            \n            variable\n            GoogleTokenStrategy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/twitter.strategy.ts\n            \n            injectable\n            TwitterStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/twitter.strategy.ts\n            \n            variable\n            TwitterTokenStrategy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/verifier.ts\n            \n            injectable\n            Verifier\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/users/joi/auth-user.joi.ts\n            \n            variable\n            authUserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/middlewares/userbyId.middleware.ts\n            \n            injectable\n            UserIdMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            function\n            validateUsername\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            variable\n            illegalUsernames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/users.providers.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            ARTICLE_MODEL_TOKEN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            DB_CONNECTION_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            env\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            envService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            FACEBOOK_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            GOOGLE_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            SERVER_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            SERVER_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            TWITTER_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            USER_MODEL_TOKEN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared-variables.ts\n            \n            injectable\n            sharedVariables\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utilities/encryption.ts\n            \n            variable\n            generateHashedPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utilities/encryption.ts\n            \n            variable\n            generateSalt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utilities/keys.ts\n            \n            function\n            extractKey\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nest/microservices : ^4.5.4\n        \n            @nestjs/common : ^6.0.0\n        \n            @nestjs/core : ^6.0.0\n        \n            @nestjs/mongoose : ^6.0.0\n        \n            @nestjs/passport : ^6.0.0\n        \n            @nestjs/platform-express : ^6.0.0\n        \n            @nestjs/platform-socket.io : ^6.0.5\n        \n            @nestjs/websockets : ^6.0.5\n        \n            @types/cookie-parser : ^1.4.1\n        \n            @types/helmet : 0.0.43\n        \n            @types/joi : ^14.3.2\n        \n            @types/mongoose : ^5.3.25\n        \n            @types/multer-s3 : ^2.7.6\n        \n            @types/passport : ^1.0.0\n        \n            @types/passport-jwt : ^3.0.1\n        \n            @types/passport-local : ^1.0.33\n        \n            @types/request : ^2.48.1\n        \n            @types/uuid : ^3.4.4\n        \n            @types/ws : ^6.0.1\n        \n            aws-sdk : ^2.437.0\n        \n            chalk : ^2.4.2\n        \n            class-transformer : ^0.2.0\n        \n            class-validator : ^0.9.1\n        \n            dotenv : ^7.0.0\n        \n            joi : ^14.3.1\n        \n            mongoose : ^5.5.0\n        \n            multer-s3 : ^2.9.0\n        \n            nodemailer : ^6.1.0\n        \n            oauth2-server : ^3.0.1\n        \n            passport : ^0.4.0\n        \n            passport-facebook-token : ^3.3.0\n        \n            passport-google-plus-token : ^2.1.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            passport-twitter-token : ^1.3.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.3.3\n        \n            ts-loader : ^5.3.3\n        \n            uuid : ^3.3.2\n        \n            ws : ^6.2.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            extractKey   (src/.../keys.ts)\n                        \n                        \n                            getErrorMessage   (src/.../error-handler.ts)\n                        \n                        \n                            getUniqueErrorMessage   (src/.../error-handler.ts)\n                        \n                        \n                            isEmptyObject   (src/.../utils.ts)\n                        \n                        \n                            validateUsername   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utilities/keys.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            extractKey\n                        \n                        \n                    \n                \n            \n            \n                \nextractKey(path)\n                \n            \n\n\n\n\n            \n                \n                    This function is for extract any key from a file, see ./keys file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/helpers/error-handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getErrorMessage\n                        \n                        \n                    \n                \n            \n            \n                \ngetErrorMessage(err)\n                \n            \n\n\n\n\n            \n                \n                    Get the error message from error object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUniqueErrorMessage\n                        \n                        \n                    \n                \n            \n            \n                \ngetUniqueErrorMessage(err)\n                \n            \n\n\n\n\n            \n                \n                    Verifies the unique error un mongo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/helpers/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isEmptyObject\n                        \n                        \n                    \n                \n            \n            \n                \nisEmptyObject(value)\n                \n            \n\n\n\n\n            \n                \n                    Defines if the provided parameter is an empty object {} or not\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/modules/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            validateUsername\n                        \n                        \n                    \n                \n            \n            \n                \nvalidateUsername(username)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nbash\n$ npm install\nRunning the app\n```bash\ndevelopment\n$ npm run start\nwatch mode\n$ npm run start:dev\nproduction mode\n$ npm run start:prod\n```\nTest\n```bash\nunit tests\n$ npm run test\ne2e tests\n$ npm run test:e2e\ntest coverage\n$ npm run test:cov\n```\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\"# Nest-Scaffold\" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticlesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ArticlesModule\n\n\n\ncluster_ArticlesModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nArticlesModule\n\nArticlesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticlesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nArticlesModule -->\n\nDatabaseModule->ArticlesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nArticlesService\n\nArticlesService\n\nArticlesModule -->\n\nArticlesService->ArticlesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTwitterStrategy\n\nTwitterStrategy\n\nAuthModule -->\n\nTwitterStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/sharedVariables.html":{"url":"injectables/sharedVariables.html","title":"injectable - sharedVariables","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  sharedVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared-variables.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentSimpleString\n                            \n                            \n                                    Private\n                                simpleString\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeSimpleString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeSimpleString\n                        \n                        \n                    \n                \n            \n            \n                \nchangeSimpleString(string: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared-variables.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    string\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentSimpleString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.simpleString.asObservable()\n                        \n                    \n                        \n                            \n                                    Defined in src/shared-variables.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            simpleString\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new BehaviorSubject('first basic')\n                        \n                    \n                        \n                            \n                                    Defined in src/shared-variables.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\n/**\n *  Function for local Observable Variables\n */\nexport class sharedVariables {\n  private simpleString = new BehaviorSubject('first basic');\n\n  currentSimpleString = this.simpleString.asObservable();\n\n  changeSimpleString(string: string) {\n    this.simpleString.next(string);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ARTICLE_MODEL_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            articleProviders   (src/.../articles.providers.ts)\n                        \n                        \n                            articleSchema   (src/.../article.joi.ts)\n                        \n                        \n                            ArticleSchema   (src/.../article.schema.ts)\n                        \n                        \n                            authProviders   (src/.../auth.providers.ts)\n                        \n                        \n                            authUserSchema   (src/.../auth-user.joi.ts)\n                        \n                        \n                            Config   (src/.../config.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            DB_CONNECTION_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            env   (src/.../server.constants.ts)\n                        \n                        \n                            environmentService   (src/.../multer.ts)\n                        \n                        \n                            environmentService   (src/.../config.ts)\n                        \n                        \n                            envService   (src/.../server.constants.ts)\n                        \n                        \n                            FACEBOOK_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            facebookConfig   (src/.../facebook-config.ts)\n                        \n                        \n                            FacebookTokenStrategy   (src/.../facebook.strategy.ts)\n                        \n                        \n                            generateHashedPassword   (src/.../encryption.ts)\n                        \n                        \n                            generateSalt   (src/.../encryption.ts)\n                        \n                        \n                            GOOGLE_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            googleConfig   (src/.../google-config.ts)\n                        \n                        \n                            GoogleTokenStrategy   (src/.../google-plus.strategy.ts)\n                        \n                        \n                            illegalUsernames   (src/.../user.schema.ts)\n                        \n                        \n                            jwtSecret   (src/.../config.ts)\n                        \n                        \n                            MESSAGES   (src/.../server.constants.ts)\n                        \n                        \n                            MulterConfig   (src/.../multer.ts)\n                        \n                        \n                            opts   (src/.../database.providers.ts)\n                        \n                        \n                            parseImageURL   (src/.../converters.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            rootPath   (src/.../config.ts)\n                        \n                        \n                            SERVER_CONFIG   (src/.../server.constants.ts)\n                        \n                        \n                            SERVER_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            storage   (src/.../multer.ts)\n                        \n                        \n                            TWITTER_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            twitterConfig   (src/.../twitter-config.ts)\n                        \n                        \n                            TwitterTokenStrategy   (src/.../twitter.strategy.ts)\n                        \n                        \n                            USER_MODEL_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            userProviders   (src/.../users.providers.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ARTICLE_MODEL_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Article'\n                        \n                    \n\n                \n                    \n                        Token for Article model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_CONNECTION_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'DbConnectionToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            env\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : envService.get('NODE_ENV') || 'development'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            envService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EnvironmentService('.env')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FACEBOOK_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FacebookConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GOOGLE_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GoogleConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  UNAUTHORIZED_EMAIL_OR_USERNAME_IN_USE: 'Email or username already exists',\n  UNAUTHORIZED_INVALID_PASSWORD: 'Invalid password',\n  UNAUTHORIZED_INVALID_EMAIL: 'The email does not exist',\n  UNAUTHORIZED_UNRECOGNIZED_BEARER: 'Unrecognized bearer of the token'\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERVER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IEnvironmentConfig\n\n                        \n                    \n                    \n                        \n                            Default value : Config[env]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERVER_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ServerConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TWITTER_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'TwitterConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_MODEL_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'User'\n                        \n                    \n\n                \n                    \n                        Token for User  model\n\n                    \n                \n\n            \n        \n\n    src/modules/articles/articles.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            articleProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: ARTICLE_MODEL_TOKEN,\n    useFactory: (connection: Connection) => connection.model('Article', ArticleSchema),\n    inject: [DB_CONNECTION_TOKEN],\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/articles/joi/article.joi.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            articleSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectSchema\n\n                        \n                    \n                    \n                        \n                            Default value : object({\n  title: string().required(),\n  content: string().required()\n})\n                        \n                    \n\n                \n                    \n                        Article Schema Declaration (Before REST communication)\n\n                    \n                \n\n            \n        \n\n    src/modules/articles/schemas/article.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ArticleSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Schema\n\n                        \n                    \n                    \n                        \n                            Default value : new Schema({\n  created: {\n    type: Date,\n    default: new Date()\n  },\n  title: {\n    type: String,\n    required: 'Title cannot be blank'\n  },\n  content: {\n    type: String,\n    default: ''\n  },\n  creator: {\n    type: Schema.Types.ObjectId,\n    ref: 'User'\n  }\n})\n                        \n                    \n\n                \n                    \n                        Article Schema Declaration for Mongodb, declarated by mongoose schema\n\n                    \n                \n\n            \n        \n\n    src/modules/auth/auth.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: FACEBOOK_CONFIG_TOKEN,\n    useValue: facebookConfig\n  },\n  {\n    provide: TWITTER_CONFIG_TOKEN,\n    useValue: twitterConfig\n  },\n  {\n    provide: GOOGLE_CONFIG_TOKEN,\n    useValue: googleConfig\n  }\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/joi/auth-user.joi.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authUserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectSchema\n\n                        \n                    \n                    \n                        \n                            Default value : object({\n  firstName: string().required(),\n  lastName: string().required(),\n  username: string().required(),\n  email: string().email().required(),\n  password: string().alphanum().min(6).max(36).required()\n})\n                        \n                    \n\n\n            \n        \n\n    src/config/config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  development: {\n    rootPath,\n    db: 'mongodb://localhost:27017/store',\n    httpPort: 1337,\n    wsPort: 1338,\n    jwtSecret,\n    domain: 'localhost',\n    httpProtocol: 'http',\n    wsProtocol: 'ws',\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  },\n  production: {\n    rootPath,\n    db: environmentService.get('MONGODB_CONNECTION'),\n    httpPort: + environmentService.get('HTTP_SERVER_PORT'),\n    wsPort: + environmentService.get('WS_PORT'),\n    jwtSecret,\n    domain: environmentService.get('DOMAIN'),\n    httpProtocol: environmentService.get('HTTP_PROTOCOL'),\n    wsProtocol: environmentService.get('WS_PROTOCOL'),\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  }\n}\n                        \n                    \n\n                \n                    \n                        Definimos los valores para local y produccion\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            environmentService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EnvironmentService('.env')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtSecret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : extractKey(`${rootPath}/keys/jwt.private.key`)\n                        \n                    \n\n                \n                    \n                        En la constante jwtSecret asignamos la llave creada en /keys/jwt.private.key\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.cwd()\n                        \n                    \n\n                \n                    \n                        Seteamos la variable rootPath, para saber la ruta en la cual se encuentra el servidor.\n\n                    \n                \n\n            \n        \n\n    src/database/database.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: DB_CONNECTION_TOKEN,\n    useFactory: async () => {\n      try {\n        console.log(`Connecting to ${ SERVER_CONFIG.db }, ${ opts }`);\n        return await connect(`${SERVER_CONFIG.db}`, opts);\n      } catch (ex) {\n        console.log(ex);\n      }\n      \n    },\n  },\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            opts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    useCreateIndex: true,\n \tuseNewUrlParser: true,\n    keepAlive: true,\n    socketTimeoutMS: 30000,\n    poolSize: 100,\n    reconnectTries: Number.MAX_VALUE,\n    reconnectInterval: 500,\n    autoReconnect: true,\n  }\n                        \n                    \n\n\n            \n        \n\n    src/config/multer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environmentService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EnvironmentService('.env')\n                        \n                    \n\n                \n                    \n                        New instance of environment service class\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MulterConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  storage: storage\n}\n                        \n                    \n\n                \n                    \n                        Creating variable for exportation\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        creating storage variable, this variable will get the configuration (local or production)\n\n                    \n                \n\n            \n        \n\n    src/modules/auth/config/facebook-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            facebookConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFacebookConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  login_dialog_uri: 'https://www.facebook.com/v2.12/dialog/oauth',\n  access_token_uri: 'https://graph.facebook.com/v2.12/oauth/access_token',\n  client_id: '448307408974851',\n  client_secret: '4bef83a9a03d5c81445896dbc623b01d',\n  oauth_redirect_uri: 'http://localhost:4200/index',\n  state: '{fbstate}'\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/passport/facebook.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FacebookTokenStrategy\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('passport-facebook-token')\n                        \n                    \n\n\n            \n        \n\n    src/utilities/encryption.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            generateHashedPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : (salt, password) => {\n  return createHmac('sha256', salt).update(password).digest('hex');\n}\n                        \n                    \n\n                \n                    \n                        Generating hashed password for the provided salt, password\nParams - Salt - password\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            generateSalt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : () => {\n  return randomBytes(128).toString('base64');\n}\n                        \n                    \n\n                \n                    \n                        Salt generator for password and user schema\nParams - none\n\n                    \n                \n\n            \n        \n\n    src/modules/auth/config/google-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            googleConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IGoogleConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  login_dialog_uri: 'https://accounts.google.com/o/oauth2/auth',\n  client_id: '342352192956-dr6rht4d8neev4lsf11inalma1j86rrf.apps.googleusercontent.com',\n  client_secret: 'PKiHC4-jos975AffhQgSLcR6',\n  oauth_redirect_uri: 'http://localhost:4200/index',\n  access_token_uri: 'https://accounts.google.com/o/oauth2/token',\n  response_type: 'code',\n  scopes: [\n    'https://www.googleapis.com/auth/plus.login',\n    'https://www.googleapis.com/auth/plus.profile.emails.read'\n  ],\n  grant_type: 'authorization_code'\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/passport/google-plus.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GoogleTokenStrategy\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('passport-google-plus-token')\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            illegalUsernames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['meanjs', 'administrator', 'password', 'admin', 'user', 'unknown', 'anonymous', 'null', 'undefined', 'api']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Schema\n\n                        \n                    \n                    \n                        \n                            Default value : new Schema({\n  created: {\n    type: Date,\n    default: new Date()\n  },\n  firstName: {\n    type: String,\n    required: 'First name is required'\n  },\n  lastName: {\n    type: String,\n    required: 'Last name is required'\n  },\n  displayName: {\n    type: String,\n    trim: true\n  },\n  email: {\n    type: String,\n    index: {\n      unique: true,\n      sparse: true // For this to work on a previously indexed field, the index must be dropped & the application restarted.\n    },\n    lowercase: true,\n    trim: true,\n  },\n  username: {\n    type: String,\n    unique: 'Username already exists',\n    required: 'Please fill in a username',\n    validate: [validateUsername, 'Please enter a valid username: 3+ characters long, non restricted word, characters \"_-.\", no consecutive dots, does not begin or end with dots, letters a-z and numbers 0-9.'],\n    lowercase: true,\n    trim: true\n  },\n  active: {\n    type: Boolean,\n    default: false\n  },\n  password: {\n    type: String,\n    default: ''\n  },\n  profileImageURL: {\n    type: String,\n    default: '/modules/users/client/img/profile/default.png'\n  },\n  salt: {\n    type: String\n  },\n  provider: {\n    type: String,\n    required: 'Provider is required'\n  },\n  providerData: {},\n  additionalProvidersData: {},\n  roles: {\n    type: [{\n      type: String,\n      enum: ['user', 'admin']\n    }],\n    default: ['user'],\n    required: 'Please provide at least one role'\n  },\n  updated: {\n    type: Date\n  },\n  /* For reset password */\n  resetPasswordToken: {\n    type: String\n  },\n  resetPasswordExpires: {\n    type: Date\n  }\n})\n                        \n                    \n\n\n            \n        \n\n    src/common/helpers/converters.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            parseImageURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (url) => {\n\tconsole.log(url);\n\treturn url;\n}\n                        \n                    \n\n\n            \n        \n\n    src/decorators/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/config/twitter-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            twitterConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ITwitterConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consumer_key: 'gkeY5a5pIuKSwTRDNJwqnyCDZ',\n  consumer_secret: 'XCrSo4BXergVa9TIfCaK1oNLCdM53cBu75RMevVBDZ3jnB7dQN',\n  request_token_uri: 'https://api.twitter.com/oauth/request_token',\n  login_dialog_uri: 'https://api.twitter.com/oauth/authenticate',\n  access_token_uri: 'https://api.twitter.com/oauth/access_token',\n  oauth_redirect_uri: 'http://localhost:4200/recipes'\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/passport/twitter.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TwitterTokenStrategy\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('passport-twitter-token')\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/users.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            userProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: USER_MODEL_TOKEN,\n    useFactory: (connection: Connection) => connection.model('User', UserSchema),\n    inject: [DB_CONNECTION_TOKEN],\n  },\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
